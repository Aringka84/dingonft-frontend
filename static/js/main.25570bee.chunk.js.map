{"version":3,"sources":["utils.js","api.js","CollectionCard.jsx","ProfileController.jsx","ExploreController.jsx","assets/img/dingocoin.png","App.jsx","index.jsx","CustomDivider.jsx","GetWalletModal.jsx"],"names":["toSatoshi","x","undefined","Error","BigInt","Web3Utils","toWei","toString","toLocaleString","isNegative","integer","replace","satoshiToLocaleString","post","link","data","a","controller","AbortController","setTimeout","abort","fetch","withCredentials","method","signal","headers","Accept","body","JSON","stringify","json","API_URL","getBusy","address","result","busy","getContent","timestamp","signature","getBuyTransaction","price","sendBuyTransaction","transaction","getListTransaction","contentHash","royalty","sendListTransaction","content","preview","name","description","tags","updateProfile","owner","thumbnail","getProfileCreatedNfts","getProfileOwnedNfts","getProfileHistoricalNfts","getProfileStats","getProfileCreatedCount","getProfileCollectionCount","getProfileHistoricalCount","queryProfileBySearch","search","queryProfileByTradeCount","queryNft","key","direction","offset","limit","queryNftBySearch","queryNftByNewest","beforeId","getCollectionStats","handle","queryCollectionByOwner","queryCollectionBySearch","queryUnassignedNftsByOwner","createCollection","updateCollection","setCollectionItem","getCollectionItems","getItemCollection","queryCollectionByTradeCountScaled","queryCollectionByTradeVolume","CollectionCard","ProfileController","ExploreController","App","React","useState","location","setLocation","useEffect","window","pathname","searchQuery","setSearchQuery","searchErrorShow","setSearchErrorShow","doSearch","e","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","trim","assign","className","Navbar","bg","expand","sticky","Container","Brand","href","alt","src","DingocoinLogo","Toggle","Collapse","Nav","style","paddingRight","textAlign","Link","Form","onSubmit","InputGroup","minWidth","FormControl","placeholder","value","onChange","target","length","Button","variant","type","icon","faAngleRight","Modal","size","centered","show","onHide","Header","closeButton","Title","Body","onClick","ReactDOM","render","document","getElementById","CustomDivider","faAngleDown","GetWalletModal","props","rel"],"mappings":"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","file":"static/js/main.25570bee.chunk.js","sourcesContent":["/* global BigInt */\n\nimport Web3Utils from \"web3-utils\";\n\nconst toSatoshi = (x) => {\n  if (x === null || x === undefined || typeof x !== \"string\" || x === \"\") {\n    throw new Error(\"Expected string input\");\n  }\n  return (BigInt(Web3Utils.toWei(x, \"gwei\")) / 10n).toString();\n};\n\nconst toLocaleString = (x) => {\n  const isNegative = BigInt(x) < 0n;\n  if (isNegative) {\n    x = -x;\n  }\n  const integer = BigInt(x).toString();\n  return (\n    (isNegative ? \"-\" : \"\") + `${integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`\n  );\n};\n\nconst satoshiToLocaleString = (x) => {\n  const isNegative = BigInt(x) < 0n;\n  if (isNegative) {\n    x = -x;\n  }\n  const integer = (BigInt(x) / 100000000n).toString();\n  return (\n    (isNegative ? \"-\" : \"\") + `${integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`\n  );\n};\n\nconst post = async (link, data) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 300000);\n  return (\n    await fetch(link, {\n      withCredentials: true,\n      method: \"POST\",\n      signal: controller.signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n  ).json();\n};\n\nconst get = (link) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 300000);\n  return fetch(link, {\n    withCredentials: true,\n    method: \"GET\",\n    signal: controller.signal,\n  });\n};\n\nexport { toSatoshi, toLocaleString, satoshiToLocaleString, post, get };\n","import { post } from \"./utils\";\n\nconst API_URL = \"https://nftp0.dingocoin.io\";\n\nconst getBusy = async (data) => {\n  const result = await post(`${API_URL}/nft/getBusy`, {\n    address: data.address,\n  });\n  if (result === null) {\n    return null;\n  } else {\n    return result.busy;\n  }\n};\n\nconst getContent = (data) => {\n  return post(`${API_URL}/nft/getContent`, {\n    address: data.address,\n    timestamp: data.timestamp,\n    signature: data.signature,\n  });\n};\n\nconst getBuyTransaction = (data) => {\n  return post(`${API_URL}/nft/getBuyTransaction`, {\n    address: data.address,\n    price: data.price,\n  });\n};\n\nconst sendBuyTransaction = (data) => {\n  return post(`${API_URL}/nft/sendBuyTransaction`, {\n    transaction: data.transaction,\n  });\n};\n\nconst getListTransaction = (data) => {\n  return post(`${API_URL}/nft/getListTransaction`, {\n    contentHash: data.contentHash,\n    price: data.price,\n    royalty: data.royalty,\n  });\n};\n\nconst sendListTransaction = (data) => {\n  return post(`${API_URL}/nft/sendListTransaction`, {\n    content: data.content,\n    preview: data.preview,\n    name: data.name,\n    description: data.description,\n    tags: data.tags,\n    transaction: data.transaction,\n  });\n};\n\nconst updateProfile = (data) => {\n  return post(`${API_URL}/profile/update`, {\n    timestamp: data.timestamp,\n    owner: data.owner,\n    name: data.name,\n    thumbnail: data.thumbnail,\n    signature: data.signature,\n  });\n};\n\nconst getProfileCreatedNfts = (data) => {\n  return post(`${API_URL}/profile/getCreatedNfts`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileOwnedNfts = (data) => {\n  return post(`${API_URL}/profile/getOwnedNfts`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileHistoricalNfts = (data) => {\n  return post(`${API_URL}/profile/getHistoricalNfts`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileStats = (data) => {\n  return post(`${API_URL}/profile/getStats`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileCreatedCount = (data) => {\n  return post(`${API_URL}/profile/getCreatedCount`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileCollectionCount = (data) => {\n  return post(`${API_URL}/profile/getCollectionCount`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileHistoricalCount = (data) => {\n  return post(`${API_URL}/profile/getHistoricalCount`, {\n    owner: data.owner,\n  });\n};\n\nconst queryProfileBySearch = (data) => {\n  return post(`${API_URL}/profile/queryBySearch`, {\n    search: data.search,\n  });\n};\n\nconst queryProfileByTradeCount = (data) => {\n  return post(`${API_URL}/profile/queryByTradeCount`, {});\n};\n\nconst queryNft = (data) => {\n  return post(`${API_URL}/nft/query`, {\n    key: data.key,\n    direction: data.direction,\n    offset: data.offset,\n    limit: data.limit,\n  });\n};\n\nconst queryNftBySearch = (data) => {\n  return post(`${API_URL}/nft/queryBySearch`, {\n    search: data.search,\n  });\n};\n\nconst queryNftByNewest = (data) => {\n  return post(`${API_URL}/nft/queryByNewest`, {\n    beforeId: data.beforeId,\n  });\n};\n\nconst getCollectionStats = (data) => {\n  return post(`${API_URL}/collection/getStats`, {\n    handle: data.handle,\n  });\n};\n\nconst queryCollectionByOwner = (data) => {\n  return post(`${API_URL}/collection/queryByOwner`, {\n    owner: data.owner,\n  });\n};\n\nconst queryCollectionBySearch = (data) => {\n  return post(`${API_URL}/collection/queryBySearch`, {\n    search: data.search,\n  });\n};\n\nconst queryUnassignedNftsByOwner = (data) => {\n  return post(`${API_URL}/collection/queryUnassignedNftsByOwner`, {\n    owner: data.owner,\n  });\n};\n\nconst createCollection = (data) => {\n  return post(`${API_URL}/collection/create`, {\n    timestamp: data.timestamp,\n    owner: data.owner,\n    handle: data.handle,\n    name: data.name,\n    thumbnail: data.thumbnail,\n    description: data.description,\n    signature: data.signature,\n  });\n};\n\nconst updateCollection = (data) => {\n  return post(`${API_URL}/collection/update`, {\n    timestamp: data.timestamp,\n    handle: data.handle,\n    name: data.name,\n    thumbnail: data.thumbnail,\n    description: data.description,\n    signature: data.signature,\n  });\n};\n\nconst setCollectionItem = (data) => {\n  return post(`${API_URL}/collection/setItem`, {\n    timestamp: data.timestamp,\n    address: data.address,\n    handle: data.handle,\n    signature: data.signature,\n  });\n};\n\nconst getCollectionItems = (data) => {\n  return post(`${API_URL}/collection/getItems`, {\n    handle: data.handle,\n  });\n};\n\nconst getItemCollection = (data) => {\n  return post(`${API_URL}/collection/getItemCollection`, {\n    address: data.address,\n  });\n};\n\nconst queryCollectionByTradeCountScaled = () => {\n  return post(`${API_URL}/collection/queryByTradeCountScaled`, {});\n};\n\nconst queryCollectionByTradeVolumeScaled = () => {\n  return post(`${API_URL}/collection/queryByTradeVolumeScaled`, {});\n};\n\nconst queryCollectionByTradeVolume = () => {\n  return post(`${API_URL}/collection/queryByTradeVolume`, {});\n};\n\nconst queryCollectionByValuable = () => {\n  return post(`${API_URL}/collection/queryByValuable`, {});\n};\n\nexport {\n  getBusy,\n  getContent,\n  getBuyTransaction,\n  sendBuyTransaction,\n  getListTransaction,\n  sendListTransaction,\n  updateProfile,\n  getProfileCreatedNfts,\n  getProfileOwnedNfts,\n  getProfileHistoricalNfts,\n  getProfileStats,\n  getProfileCreatedCount,\n  getProfileCollectionCount,\n  getProfileHistoricalCount,\n  queryProfileBySearch,\n  queryProfileByTradeCount,\n  queryNft,\n  queryNftBySearch,\n  queryNftByNewest,\n  createCollection,\n  updateCollection,\n  getCollectionStats,\n  queryCollectionByOwner,\n  queryCollectionBySearch,\n  queryUnassignedNftsByOwner,\n  setCollectionItem,\n  getCollectionItems,\n  getItemCollection,\n  queryCollectionByTradeCountScaled,\n  queryCollectionByTradeVolumeScaled,\n  queryCollectionByTradeVolume,\n  queryCollectionByValuable,\n};\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { getCollection, getPreviewLink } from \"./storage\";\nimport { getCollectionStats } from \"./api\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faList,\n  faCashRegister,\n  faExchangeAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { toLocaleString } from \"./utils\";\n\nfunction CollectionCard(props) {\n  const domRef = React.useRef();\n  const [isVisible, setVisible] = React.useState(false);\n  const [previewLink, setPreviewLink] = React.useState(null);\n  const [collection, setCollection] = React.useState(null);\n  const [stats, setStats] = React.useState(null);\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setVisible(true);\n        }\n      });\n    });\n    observer.observe(domRef.current);\n    return () => {\n      try {\n        observer.unobserve(domRef.current);\n      } catch {}\n    };\n  }, []);\n\n  React.useEffect(() => {\n    (async () => {\n      if (isVisible) {\n        const collection = await getCollection(props.handle);\n        setCollection(collection);\n\n        if (collection !== null) {\n          setPreviewLink(getPreviewLink(collection.thumbnail));\n\n          const stats = await getCollectionStats({ handle: props.handle });\n          setStats(stats);\n        }\n      }\n    })();\n  }, [isVisible, props.handle]);\n\n  return (\n    <Container className=\"collection-card-holder\" ref={domRef}>\n      {collection === null ||\n        (stats === null && (\n          <div className=\"collection-card d-flex flex-column\">\n            <div className=\"d-flex flex-row my-auto\">\n              <div className=\"spinner mx-auto\">\n                <div\n                  className=\"spinner-border text-primary\"\n                  role=\"status\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      {collection !== null && stats !== null && (\n        <div className=\"collection-card d-flex flex-column\">\n          <img className=\"mx-auto mt-4 mb-3\" src={previewLink} />\n          <span className=\"mx-auto title\">\n            {collection !== null && collection.name}\n          </span>\n          <span className=\"truncate text-muted description\">\n            {collection !== null && collection.description}\n          </span>\n          <hr className=\"mt-auto\" />\n          <div className=\"d-flex flex-row text-muted card-sub-body\">\n            <span className=\"ms-auto\">\n              <FontAwesomeIcon icon={faList} />{\" \"}\n              {stats === null ? \"-\" : stats.count}\n            </span>\n            &nbsp;&nbsp;&nbsp;\n            <span>\n              <FontAwesomeIcon icon={faCashRegister} />{\" \"}\n              {stats === null ? \"-\" : toLocaleString(stats.tradeVolume)}\n            </span>\n            &nbsp;&nbsp;&nbsp;\n            <span className=\"me-auto\">\n              <FontAwesomeIcon icon={faExchangeAlt} />{\" \"}\n              {stats === null ? \"-\" : stats.tradeCount}\n            </span>\n          </div>\n        </div>\n      )}\n    </Container>\n  );\n}\n\nexport default CollectionCard;\n","/* global BigInt */\n\nimport {\n  Container,\n  Row,\n  Button,\n  Form,\n  Nav,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\nimport React from \"react\";\nimport Sha256 from \"crypto-js/sha256\";\nimport Hex from \"crypto-js/enc-hex\";\nimport { getMeta, getState, getProfile } from \"./storage\";\nimport { toSatoshi } from \"./utils\";\nimport NFTCard from \"./NFTCard\";\nimport {\n  getContent,\n  updateProfile,\n  getProfileCreatedNfts,\n  getProfileOwnedNfts,\n  getProfileHistoricalNfts,\n  createCollection,\n  updateCollection,\n  queryCollectionByOwner,\n  queryUnassignedNftsByOwner,\n  getBusy,\n  getCollectionItems,\n  setCollectionItem,\n  getItemCollection,\n  getBuyTransaction,\n  sendBuyTransaction,\n  getProfileStats,\n} from \"./api\";\nimport GetWalletModal from \"./GetWalletModal\";\nimport CollectionCard from \"./CollectionCard\";\nimport CreateCollectionModal from \"./CreateCollectionModal\";\nimport EditCollectionModal from \"./EditCollectionModal\";\nimport EditProfileModal from \"./EditProfileModal\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { getCollection } from \"./storage\";\nimport { faPlus, faPen } from \"@fortawesome/free-solid-svg-icons\";\nimport { satoshiToLocaleString } from \"./utils\";\nimport ProfileCard from \"./ProfileCard\";\n\nfunction ProfileController() {\n  const { profileAddress, collectionHandle, nftAddress } = useParams();\n  const location = useLocation();\n  const view =\n    profileAddress !== undefined\n      ? location.pathname.endsWith(\"/owned\")\n        ? \"profileOwned\"\n        : location.pathname.endsWith(\"/stats\")\n        ? \"profileStats\"\n        : \"profile\"\n      : collectionHandle !== undefined\n      ? \"collection\"\n      : nftAddress !== undefined\n      ? \"nft\"\n      : \"unknown\";\n\n  // Variables always required.\n  const [editProfileShow, setEditProfileShow] = React.useState(null);\n  const [profile, setProfile] = React.useState(null);\n\n  // For profile view.\n  const [createCollectionShow, setCreateCollectionShow] = React.useState(false);\n  const [collections, setCollections] = React.useState(null);\n  const [unassignedList, setUnassignedList] = React.useState(null);\n  const [profileLists, setProfileLists] = React.useState(null);\n  const [profileStats, setProfileStats] = React.useState(null);\n\n  // For collection view.\n  const [collection, setCollection] = React.useState(null);\n  const [collectionItems, setCollectionItems] = React.useState(null);\n  const [editCollectionShow, setEditCollectionShow] = React.useState(false);\n\n  // For NFT view.\n  const [nftMeta, setNftMeta] = React.useState(null);\n  const [nftState, setNftState] = React.useState(null);\n  const [nftItemCollection, setNftItemCollection] = React.useState(undefined);\n  const [nftOwner, setNftOwner] = React.useState(undefined);\n  const [nftBusy, setNftBusy] = React.useState(undefined);\n  const [resellPrice, setResellPrice] = React.useState(\"\");\n  const [resellPriceError, setResellPriceError] = React.useState(\"\");\n  const [buyResult, setBuyResult] = React.useState(null);\n  const [downloadLink, setDownloadLink] = React.useState(null);\n\n  const [getWalletShow, setGetWalletShow] = React.useState(false);\n\n  // Initialize for profile view, commons.\n  React.useEffect(() => {\n    if (view.startsWith(\"profile\")) {\n      (async () => {\n        // Retrieve and set profile.\n        let profile = await getProfile(profileAddress);\n        if (profile === null) {\n          profile = {};\n        }\n        profile.address = profileAddress;\n        setProfile(profile);\n      })();\n    }\n  }, []);\n\n  // Initialize for profile view (cretions).\n  React.useEffect(() => {\n    if (view === \"profile\") {\n      (async () => {\n        // Retrieve and set collections.\n        const collections = await queryCollectionByOwner({\n          owner: profileAddress,\n        });\n        if (collections !== null) {\n          setCollections(collections.reverse());\n        }\n\n        // Retrieve and set unassigned list.\n        const unassignedList = await queryUnassignedNftsByOwner({\n          owner: profileAddress,\n        });\n        setUnassignedList(unassignedList.reverse());\n      })();\n    }\n  }, []);\n\n  // Initialize for profileOwned view.\n  React.useEffect(() => {\n    if (view === \"profileOwned\") {\n      (async () => {\n        setProfileLists({\n          createdNfts: (\n            await getProfileCreatedNfts({ owner: profileAddress })\n          ).results.reverse(),\n          ownedNfts: (\n            await getProfileOwnedNfts({ owner: profileAddress })\n          ).results.reverse(),\n          historicalNfts: (\n            await getProfileHistoricalNfts({ owner: profileAddress })\n          ).results.reverse(),\n        });\n      })();\n    }\n  }, []);\n\n  // Initialize for profileStats view.\n  React.useEffect(() => {\n    if (view === \"profileStats\") {\n      (async () => {\n        setProfileStats(await getProfileStats({ owner: profileAddress }));\n        console.log(await getProfileStats({ owner: profileAddress }));\n      })();\n    }\n  }, []);\n\n  // Initialize for collection view.\n  React.useEffect(() => {\n    (async () => {\n      if (view === \"collection\") {\n        const collection = await getCollection(collectionHandle);\n        collection.handle = collectionHandle;\n        setCollection(collection);\n        let profile = await getProfile(collection.owner);\n        if (profile === null) {\n          profile = {};\n        }\n        profile.address = collection.owner;\n        setProfile(profile);\n        setCollectionItems(\n          (await getCollectionItems({ handle: collectionHandle })).reverse()\n        );\n      }\n    })();\n  }, []);\n\n  // Initialize for nft view.\n  React.useEffect(() => {\n    (async () => {\n      if (view === \"nft\") {\n        const nftMeta = await getMeta(nftAddress);\n        setNftMeta(nftMeta);\n        const nftState = await getState(nftAddress);\n        setNftState(nftState);\n\n        const nftItemCollectionHandle = (\n          await getItemCollection({\n            address: nftAddress,\n          })\n        ).handle;\n        if (nftItemCollectionHandle === null) {\n          setNftItemCollection(null);\n        } else {\n          const collection = await getCollection(nftItemCollectionHandle);\n          collection.handle = nftItemCollectionHandle;\n          setNftItemCollection(collection);\n        }\n\n        if (nftState !== null && nftState.owner !== nftState.creator) {\n          let nftOwner = await getProfile(nftState.owner);\n          if (nftOwner === null) {\n            nftOwner = {};\n          }\n          nftOwner.address = nftState.owner;\n          setNftOwner(nftOwner);\n        } else {\n          setNftOwner(null);\n        }\n\n        if (nftState !== null && nftMeta !== null) {\n          let profile = await getProfile(nftState.creator);\n          if (profile === null) {\n            profile = {};\n          }\n          profile.address = nftState.creator;\n          setProfile(profile);\n        }\n\n        setNftBusy(await getBusy({ address: nftAddress }));\n      }\n    })();\n  }, []);\n\n  // Effect for NFT view.\n  React.useEffect(() => {\n    if (resellPrice === \"\") {\n      setResellPriceError(\"Resell price required\");\n    } else if (nftState !== null) {\n      if (\n        BigInt(toSatoshi(resellPrice)) >\n        BigInt(10) * BigInt(nftState.stats.price)\n      ) {\n        setResellPriceError(\n          `Resell price must be at most 10x the current price`\n        );\n      } else {\n        setResellPriceError(\"\");\n      }\n    } else {\n      setResellPriceError(\"\");\n    }\n  }, [resellPrice, nftState]);\n\n  const doEditProfileSubmit = async (profile) => {\n    if (window.dingo === undefined) {\n      setGetWalletShow(true);\n      return;\n    }\n\n    const payload = {\n      timestamp: Date.now(),\n      owner: profileAddress,\n      name: profile.name,\n      thumbnail: profile.thumbnail,\n    };\n    const message = JSON.stringify(payload);\n\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    const updateResult = await updateProfile(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doCreateCollectionSubmit = async (collection) => {\n    // Create payload and signature message.\n    const payload = {\n      timestamp: Date.now(),\n      owner: profileAddress,\n      handle: collection.handle,\n      name: collection.name,\n      thumbnail: collection.thumbnail,\n      description: collection.description,\n    };\n    const message = JSON.stringify(payload);\n\n    // Sign.\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    // Send.\n    const updateResult = await createCollection(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doEditCollectionSubmit = async (collection) => {\n    // Create payload and signature message.\n    const payload = {\n      timestamp: Date.now(),\n      handle: collection.handle,\n      name: collection.name,\n      thumbnail: collection.thumbnail,\n      description: collection.description,\n    };\n    const message = JSON.stringify(payload);\n\n    // Sign.\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    // Send.\n    const updateResult = await updateCollection(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doMove = async (address, handle) => {\n    // Create payload and signature message.\n    const payload = {\n      timestamp: Date.now(),\n      address: address,\n      handle: handle,\n    };\n    const message = JSON.stringify(payload);\n\n    // Sign.\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    // Send.\n    const updateResult = await setCollectionItem(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doDownload = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (window.dingo === undefined) {\n      setGetWalletShow(true);\n      return;\n    }\n\n    const timestamp = Date.now();\n    const message = `${nftAddress}|${timestamp}`;\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n\n    const result = await getContent({\n      address: nftAddress,\n      timestamp: timestamp,\n      signature: signResult.result,\n    });\n    if (result === null || result.error !== undefined) {\n      return;\n    }\n\n    if (result.content !== undefined) {\n      setDownloadLink(result.content);\n    }\n  };\n\n  const doBuy = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (window.dingo === undefined) {\n      setGetWalletShow(true);\n      return;\n    }\n\n    const { vins, vouts } = await getBuyTransaction({\n      address: nftAddress,\n      price: toSatoshi(resellPrice),\n    });\n    const signed = (await window.dingo.requestSignTransaction(vins, vouts))\n      .result;\n    if (signed === null || signed === undefined) {\n      return;\n    }\n\n    const result = await sendBuyTransaction({ transaction: signed });\n    setBuyResult(result);\n  };\n\n  return (\n    <div className=\"profile-container justify-content-center mx-auto\">\n      <Container>\n        {view.startsWith(\"profile\") && profile !== null && (\n          <Row>\n            <div className=\"profile-section profile-header mt-3 pt-3\">\n              <div className=\"d-flex flex-row\">\n                <span\n                  className=\"clickable ms-auto\"\n                  onClick={() => setEditProfileShow(true)}\n                >\n                  <FontAwesomeIcon className=\"me-1\" icon={faPen} /> Edit\n                </span>\n              </div>\n              <div className=\"d-flex flex-row\">\n                <ul className=\"profile-cards-container mt-4 mx-auto mb-4\">\n                  <ProfileCard address={profileAddress} />\n                </ul>\n              </div>\n              <hr />\n              <Nav variant=\"tabs\" className=\"custom-nav-tabs\">\n                <Nav.Item>\n                  <Nav.Link\n                    eventKey=\"creations\"\n                    active={\n                      view === \"profile\" ||\n                      view === \"collection\" ||\n                      view === \"nft\"\n                    }\n                    href={`/profile/${profile.address}/`}\n                  >\n                    NFT creations\n                  </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link\n                    eventKey=\"unassigned\"\n                    active={view === \"profileOwned\"}\n                    href={`/profile/${profile.address}/owned`}\n                  >\n                    Owned NFTs\n                  </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link\n                    eventKey=\"unassigned\"\n                    active={view === \"profileStats\"}\n                    href={`/profile/${profile.address}/stats`}\n                  >\n                    Stats\n                  </Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </div>\n          </Row>\n        )}\n\n        {view === \"profile\" && (\n          <Row>\n            <div className=\"profile-section profile-content mt-3 py-3\">\n              <div className=\"d-flex flex-row content-header\">\n                <span className=\"me-auto content-title accent\">\n                  Collections\n                </span>\n                <span\n                  className=\"clickable\"\n                  onClick={() => setCreateCollectionShow(true)}\n                >\n                  <FontAwesomeIcon className=\"me-1\" icon={faPlus} /> Create new\n                </span>\n              </div>\n              {collections !== null && collections.length > 0 && (\n                <ul className=\"collection-cards-container mt-4\">\n                  {collections.map((x) => (\n                    <a key={x} href={`/collection/${x}`}>\n                      <CollectionCard handle={x} />\n                    </a>\n                  ))}\n                </ul>\n              )}\n              {collections !== null && collections.length === 0 && (\n                <div className=\"d-flex flex-row mt-2 mb-2\">\n                  <span className=\"mx-auto text-muted\">\n                    User has no collection\n                  </span>\n                </div>\n              )}\n            </div>\n          </Row>\n        )}\n\n        {view === \"profile\" &&\n          unassignedList !== null &&\n          unassignedList.length > 0 && (\n            <Row>\n              <div className=\"profile-section profile-content mt-3 py-3\">\n                <div className=\"d-flex flex-row content-header\">\n                  <span className=\"me-auto content-title accent\">\n                    Unassigned NFTs\n                  </span>\n                </div>\n                <ul className=\"cards-container mt-4\">\n                  {unassignedList.map((x) => (\n                    <div key={x}>\n                      <a href={`/nft/${x}`}>\n                        <NFTCard address={x} />\n                      </a>\n                      <DropdownButton\n                        className=\"mt-2 mb-4 px-4\"\n                        title=\"Move to collection\"\n                      >\n                        {collections !== null &&\n                          collections.map((y) => (\n                            <Dropdown.Item key={y} onClick={() => doMove(x, y)}>\n                              {y}\n                            </Dropdown.Item>\n                          ))}\n                      </DropdownButton>\n                    </div>\n                  ))}\n                </ul>\n              </div>\n            </Row>\n          )}\n\n        {view === \"profileOwned\" &&\n          profileLists !== null &&\n          profileLists.ownedNfts.filter(\n            (x) => !profileLists.createdNfts.some((y) => y === x)\n          ).length > 0 && (\n            <Row>\n              <div className=\"profile-section profile-content mt-3 py-3\">\n                <div className=\"d-flex flex-row content-header\">\n                  <span className=\"me-auto content-title accent\">\n                    Owned NFTs\n                  </span>\n                </div>\n                <ul className=\"cards-container mt-4\">\n                  {profileLists.ownedNfts\n                    .filter(\n                      (x) => !profileLists.createdNfts.some((y) => y === x)\n                    )\n                    .map((x) => (\n                      <a key={x} href={`/nft/${x}`}>\n                        <NFTCard address={x} />\n                      </a>\n                    ))}\n                </ul>\n              </div>\n            </Row>\n          )}\n\n        {view === \"profileOwned\" &&\n          profileLists !== null &&\n          profileLists.historicalNfts\n            .filter((x) => !profileLists.createdNfts.some((y) => y === x))\n            .filter((x) => !profileLists.ownedNfts.some((y) => y === x))\n            .length > 0 && (\n            <Row>\n              <div className=\"profile-section profile-content mt-3 py-3\">\n                <div className=\"d-flex flex-row content-header\">\n                  <span className=\"me-auto content-title accent\">\n                    Previously owned NFTs\n                  </span>\n                </div>\n                <ul className=\"cards-container mt-4\">\n                  {profileLists.historicalNfts\n                    .filter(\n                      (x) => !profileLists.createdNfts.some((y) => y === x)\n                    )\n                    .filter((x) => !profileLists.ownedNfts.some((y) => y === x))\n                    .map((x) => (\n                      <a key={x} href={`/nft/${x}`}>\n                        <NFTCard address={x} />\n                      </a>\n                    ))}\n                </ul>\n              </div>\n            </Row>\n          )}\n\n        {view === \"profileStats\" && profileStats !== null && (\n          <Row>\n            <div className=\"profile-section profile-content mt-3 py-3\">\n              <div className=\"d-flex flex-row content-header\">\n                <span className=\"me-auto content-title accent\">\n                  Profile Stats\n                </span>\n              </div>\n              <div className=\"mt-4\">\n                <ul>\n                  <li>NFTs created: {profileStats.listCount}</li>\n                  <li>NFTs bought/sold: {profileStats.tradeCount}</li>\n                  <li>NFT purchases (DINGO): {satoshiToLocaleString(profileStats.buyVolume)}</li>\n                  <li>NFT sales (DINGO): {satoshiToLocaleString(profileStats.sellVolume)}</li>\n                </ul>\n              </div>\n            </div>\n          </Row>\n        )}\n\n        {view === \"collection\" && collection !== null && (\n          <Row>\n            <div className=\"profile-section profile-content mt-3 py-3\">\n              {profile !== null && (\n                <div className=\"d-flex flex-row content-header\">\n                  <div\n                    className=\"text-truncate me-auto\"\n                    style={{ display: \"inline\" }}\n                  >\n                    <span className=\"content-title accent\">\n                      Collection by:{\" \"}\n                    </span>\n                    <a\n                      className=\"simple-link\"\n                      href={`/profile/${profile.address}/`}\n                    >\n                      {profile.name === \"\" ||\n                      profile.name === null ||\n                      profile.name === undefined\n                        ? profile.address\n                        : profile.name}\n                    </a>\n                  </div>\n                  <span\n                    className=\"clickable ms-auto\"\n                    onClick={() => setEditCollectionShow(true)}\n                  >\n                    <nobr>\n                      <FontAwesomeIcon className=\"me-1\" icon={faPen} /> Edit\n                    </nobr>\n                  </span>\n                </div>\n              )}\n              <div className=\"d-flex flex-row\">\n                <ul className=\"collection-cards-container mt-4 mx-auto mb-4\">\n                  <CollectionCard handle={collectionHandle} />\n                </ul>\n              </div>\n            </div>\n          </Row>\n        )}\n        {view === \"collection\" && collection !== null && (\n          <Row>\n            <div className=\"profile-section profile-content mt-3 py-3\">\n              <ul className=\"cards-container mt-4\">\n                {collectionItems !== null &&\n                  collectionItems.map((x) => (\n                    <a key={x} href={`/nft/${x}`}>\n                      <NFTCard address={x} />\n                    </a>\n                  ))}\n              </ul>\n            </div>\n          </Row>\n        )}\n\n        {view === \"nft\" &&\n          nftMeta !== null &&\n          nftItemCollection !== undefined &&\n          nftOwner !== undefined && (\n            <Row>\n              <div className=\"profile-section profile-content mt-3 py-3\">\n                <div className=\"d-flex flex-row content-header\">\n                  {nftItemCollection === null && profile !== null && (\n                    <div className=\"text-truncate\">\n                      <span className=\"content-title accent\">Created by: </span>\n                      <a\n                        className=\"simple-link\"\n                        href={\n                          profile !== null && `/profile/${profile.address}/`\n                        }\n                      >\n                        {profile.name === \"\" ||\n                        profile.name === null ||\n                        profile.name === undefined\n                          ? profile.address\n                          : profile.name}\n                      </a>\n                    </div>\n                  )}\n                  {nftItemCollection !== null && (\n                    <div className=\"text-truncate\">\n                      <span className=\"content-title accent\">\n                        In collection:{\" \"}\n                      </span>\n                      <a\n                        className=\"simple-link\"\n                        href={\n                          profile !== null &&\n                          `/collection/${nftItemCollection.handle}/`\n                        }\n                      >\n                        {nftItemCollection.name}\n                      </a>\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <ul className=\"cards-container mt-4\">\n                    <NFTCard address={nftAddress} />\n                  </ul>\n                  {nftOwner !== null && (\n                    <div className=\"text-center mt-4\">\n                      <span className=\"content-title accent\">\n                        <b>Owned by: </b>\n                      </span>\n                      <a\n                        className=\"simple-link\"\n                        href={`/profile/${nftOwner.address}/owned`}\n                      >\n                        {nftOwner.name === \"\" ||\n                        nftOwner.name === null ||\n                        nftOwner.name === undefined\n                          ? nftOwner.address\n                          : nftOwner.name}\n                      </a>\n                    </div>\n                  )}\n                  <div className=\"text-center mt-4 text-break\">\n                    <span>\n                      <b>{nftMeta.name}</b>\n                    </span>\n                    <p className=\"text-center\">\n                      <i>{nftMeta.description}</i>\n                    </p>\n                  </div>\n                  {\n                    <div className=\"d-flex flex-row mt-4\">\n                      <span className=\"ms-auto accent\">\n                        <b>Hidden content:</b>\n                      </span>\n                      &nbsp;\n                      {downloadLink === null && (\n                        <span\n                          className=\"me-auto clickable\"\n                          onClick={doDownload}\n                        >\n                          Verify ownership\n                        </span>\n                      )}\n                      {downloadLink !== null && (\n                        <a\n                          className=\"simple-link me-auto\"\n                          href={downloadLink}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          Link\n                        </a>\n                      )}\n                    </div>\n                  }\n                </div>\n              </div>\n            </Row>\n          )}\n\n        {view === \"nft\" && nftMeta !== null && nftItemCollection !== undefined && (\n          <Row>\n            <div className=\"profile-section profile-content mt-3 py-3\">\n              <div className=\"d-flex flex-row content-header\">\n                <span className=\"me-auto content-title accent\">\n                  Buy this NFT\n                </span>\n              </div>\n              <div>\n                {nftBusy !== undefined && nftBusy !== null && (\n                  <div className=\"mt-4 text-center\">\n                    {\" \"}\n                    <h5>NFT busy</h5>\n                    <p>\n                      <a\n                        className=\"simple-link\"\n                        href={\n                          \"https://openchains.info/coin/dingocoin/tx/\" +\n                          nftBusy.txid\n                        }\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                      >\n                        A transaction\n                      </a>{\" \"}\n                      is currenly being confirmed for this NFT. <br />\n                      Please try again in a few minutes.\n                    </p>\n                  </div>\n                )}\n                {nftBusy !== undefined &&\n                  nftBusy === null &&\n                  buyResult === null && (\n                    <div className=\"d-flex flex-column\">\n                      <div className=\"mt-4 text-center px-4\">\n                        <Form.Group>\n                          <Form.Label>\n                            <b>Resell at (*required)</b>\n                          </Form.Label>\n                          <Form.Control\n                            type=\"text\"\n                            value={resellPrice}\n                            onChange={(e) => {\n                              if (e.target.value.match(/^[0-9]*$/)) {\n                                setResellPrice(e.target.value);\n                              }\n                            }}\n                            style={{ textAlign: \"center\" }}\n                            isInvalid={resellPriceError !== \"\"}\n                          />\n                          {resellPriceError && (\n                            <div>\n                              <Form.Text className=\"input-error\">\n                                {resellPriceError}\n                              </Form.Text>\n                            </div>\n                          )}\n                          <Form.Text className=\"text-muted\">\n                            New price you want to sell this NFT for (min. 1\n                            Dingocoin).\n                          </Form.Text>\n                        </Form.Group>\n                      </div>\n                      <div className=\"d-flex flex-row\">\n                        <Button\n                          className=\"popup-button mt-4 mx-auto px-4\"\n                          style={{ width: \"auto\" }}\n                          disabled={resellPriceError !== \"\"}\n                          onClick={doBuy}\n                        >\n                          Buy and resell NFT\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                {buyResult !== null && buyResult.error === undefined && (\n                  <div className=\"mt-4 text-center\">\n                    {\" \"}\n                    <h4>Transaction submitted!</h4>\n                    <p>\n                      Transaction ID:{\" \"}\n                      <a\n                        className=\"simple-link\"\n                        href={\n                          \"https://openchains.info/coin/dingocoin/tx/\" +\n                          buyResult.txid\n                        }\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                      >\n                        {buyResult.txid}\n                      </a>\n                      <br />\n                      It may take a few minutes for your transaction to be\n                      confirmed.\n                    </p>\n                  </div>\n                )}\n                {buyResult !== null && buyResult.error !== undefined && (\n                  <div style={{ textAlign: \"center\" }} className=\"mt-4\">\n                    {\" \"}\n                    <h4>Transaction failed!</h4>\n                    <p>\n                      - Make sure that your wallet has no pending transaction.\n                      <br />- You can't buy this NFT as its owner/creator.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Row>\n        )}\n      </Container>\n\n      <GetWalletModal\n        show={getWalletShow}\n        onHide={() => setGetWalletShow(false)}\n      />\n\n      {(view === \"profile\" || view === \"profileOwned\") && (\n        <EditProfileModal\n          title=\"Edit profile\"\n          show={editProfileShow}\n          onHide={() => setEditProfileShow(false)}\n          address={profileAddress}\n          onSubmit={doEditProfileSubmit}\n        />\n      )}\n\n      {view === \"profile\" && (\n        <CreateCollectionModal\n          title=\"Create new collection\"\n          show={createCollectionShow}\n          owner={profileAddress}\n          onHide={() => setCreateCollectionShow(false)}\n          onSubmit={doCreateCollectionSubmit}\n        />\n      )}\n\n      {view === \"collection\" && collection !== null && (\n        <EditCollectionModal\n          title=\"Edit collection\"\n          show={editCollectionShow}\n          handle={collection.handle}\n          onHide={() => setEditCollectionShow(false)}\n          onSubmit={doEditCollectionSubmit}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default ProfileController;\n","import {\n  Row,\n  Tab,\n  Nav,\n  Button,\n  Dropdown,\n  InputGroup,\n  FormControl,\n  Form,\n  Spinner,\n} from \"react-bootstrap\";\nimport React from \"react\";\nimport {\n  queryCollectionByTradeCountScaled,\n  queryCollectionByTradeVolume,\n  queryNftByNewest,\n  queryNft,\n  queryNftBySearch,\n  queryCollectionBySearch,\n  queryProfileBySearch,\n  queryProfileByTradeCount\n} from \"./api\";\nimport { useLocation } from \"react-router-dom\";\nimport CollectionCard from \"./CollectionCard\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBolt,\n  faFire,\n  faList,\n  faSearch,\n  faArrowRight,\n  faUserCircle,\n  faBullseye\n} from \"@fortawesome/free-solid-svg-icons\";\nimport NFTCard from \"./NFTCard\";\nimport ProfileCard from \"./ProfileCard\";\n\nfunction ExploreController() {\n  const location = useLocation();\n  let view = location.pathname.split(\"/\").pop();\n  view = [\"top\", \"active\", \"all\", \"search\"].includes(view)\n    ? view\n    : \"trending\";\n\n  // For search view.\n  const [search, setSearch] = React.useState(\"\");\n  const [searchSubView, setSearchSubView] = React.useState(null);\n  const [searchNfts, setSearchNfts] = React.useState(null);\n  const [searchCollections, setSearchCollections] = React.useState(null);\n  const [searchProfiles, setSearchProfiles] = React.useState(null);\n\n  // For explore view.\n  const [collectionList, setCollectionList] = React.useState(null);\n  const [nftList, setNftList] = React.useState(null);\n  const [nftListEnd, setNftListEnd] = React.useState(false);\n  const [profileList, setProfileList] = React.useState(null);\n  const [queryText, setQueryText] = React.useState(\"Newly listed\");\n\n  const [viewMoreEnabled, setViewMoreEnabled] = React.useState(true);\n\n  React.useEffect(() => {\n    (async () => {\n      if (view === \"trending\") {\n        const l = await queryCollectionByTradeCountScaled();\n        setCollectionList(l.results);\n      } else if (view === \"top\") {\n        const l = await queryCollectionByTradeVolume();\n        setCollectionList(l.results);\n      } else if (view === \"active\") {\n        const l = await queryProfileByTradeCount();\n        console.log(l);\n        setProfileList(l.results);\n      } else if (view === \"all\") {\n        const l = (await queryNftByNewest({ beforeId: null })).results;\n        if (l.length < 100) {\n          setNftListEnd(true);\n        }\n        setNftList(l);\n      } else if (view === \"search\") {\n        setSearch(new URLSearchParams(location.search).get(\"query\"));\n        await doChangeSearchSubview(\"nfts\");\n      }\n    })();\n  }, []);\n\n  const doSearch = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n\n    if (search.trim() !== \"\") {\n      window.location.assign(`/explore/search?query=${search.trim()}`);\n    }\n  };\n\n  const doChangeSearchSubview = async (subview) => {\n    // TODO: Figure out a more elegant way to retrieve this from the existing react state.\n    const search = new URLSearchParams(location.search).get(\"query\");\n\n    setSearchSubView(subview);\n\n    if (subview === \"nfts\" && searchNfts === null) {\n      setSearchNfts((await queryNftBySearch({ search: search })).results);\n    }\n    if (subview === \"collections\" && searchCollections === null) {\n      setSearchCollections(\n        (await queryCollectionBySearch({ search: search })).results\n      );\n    }\n    if (subview === \"profiles\" && searchProfiles === null) {\n      setSearchProfiles(\n        (await queryProfileBySearch({ search: search })).results\n      );\n    }\n  };\n\n  const doChangeQuery = async (eventKey, event) => {\n    const [key, direction] = eventKey.split(\"|\");\n    setQueryText(event.target.innerText);\n\n    setNftListEnd(false);\n    if (key === \"listHeight\") {\n      const l = (await queryNftByNewest({ beforeId: null })).results;\n      if (l.length < 100) {\n        setNftListEnd(true);\n      }\n      setNftList(l);\n      setViewMoreEnabled(true);\n    } else {\n      const l = await queryNft({\n        key: key,\n        direction: direction,\n        limit: 100,\n        offset: 0,\n      });\n      setNftList(\n        l.results.map((x) => {\n          return {\n            address: x,\n          };\n        })\n      );\n      setViewMoreEnabled(false);\n    }\n  };\n\n  const onViewMore = async () => {\n    const l = (\n      await queryNftByNewest({ beforeId: nftList[nftList.length - 1].id })\n    ).results;\n    if (l.length < 100) {\n      setNftListEnd(true);\n    }\n    setNftList(nftList.concat(l));\n  };\n\n  return (\n    <div className=\"d-flex flex-column\">\n      <div\n        className=\"mx-auto mt-4 accent text-center d-flex flex-column\"\n        style={{ maxWidth: \"584px\", width: \"100%\" }}\n      >\n        <h1>Explore</h1>\n        <Form onSubmit={doSearch}>\n          <InputGroup className=\"mt-4\">\n            <InputGroup.Text id=\"basic-addon1\">\n              <FontAwesomeIcon icon={faSearch} />\n            </InputGroup.Text>\n            {search !== null && (\n              <FormControl\n                className=\"search-box\"\n                placeholder={\"Search NFTs, collections, profiles...\"}\n                value={search}\n                onChange={(e) => {\n                  if (e.target.value.length <= 50) {\n                    setSearch(e.target.value);\n                  }\n                }}\n              />\n            )}\n            {search !== \"\" && (\n              <Button variant=\"primary\" type=\"submit\">\n                <FontAwesomeIcon icon={faArrowRight} />\n              </Button>\n            )}\n          </InputGroup>\n        </Form>\n      </div>\n      {view === \"search\" && (\n        <Tab.Container\n          id=\"left-tabs-example\"\n          activeKey={searchSubView}\n          onSelect={doChangeSearchSubview}\n        >\n          <Row>\n            <Nav variant=\"tabs\" className=\"custom-nav-tabs mt-4 constant-width\">\n              <Nav.Item\n                className=\"ms-auto text-center\"\n              >\n                <Nav.Link eventKey=\"nfts\">\n                  <FontAwesomeIcon icon={faList} className=\"me-2\" />\n                  NFTs\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item className=\"text-center\">\n                <Nav.Link eventKey=\"collections\">\n                  <FontAwesomeIcon icon={faBolt} className=\"me-2\" />\n                  Collections\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item\n                className=\"me-auto text-center\"\n              >\n                <Nav.Link eventKey=\"profiles\">\n                  <FontAwesomeIcon icon={faUserCircle} className=\"me-2\" />\n                  Profiles\n                </Nav.Link>\n              </Nav.Item>\n            </Nav>\n            <hr className=\"light-border\" />\n          </Row>\n          <Row>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"nfts\">\n                <ul className=\"cards-container mt-4\">\n                  {searchNfts === null && (\n                    <div className=\"d-flex flex-row\">\n                      <Spinner className=\"mx-auto\" animation=\"border\" />\n                    </div>\n                  )}\n                  {searchNfts !== null &&\n                    searchNfts.map((x) => (\n                      <a key={x.address} href={`/nft/${x}`}>\n                        <NFTCard address={x} />\n                      </a>\n                    ))}\n                  {searchNfts !== null && searchNfts.length === 0 && (\n                    <div className=\"d-flex flex-row\">\n                      <p className=\"mx-auto text-muted\" animation=\"border\">\n                        No matching NFTs\n                      </p>\n                    </div>\n                  )}\n                </ul>\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"collections\">\n                <ul className=\"collection-cards-container mt-4\">\n                  {searchCollections === null && (\n                    <div className=\"d-flex flex-row\">\n                      <Spinner className=\"mx-auto\" animation=\"border\" />\n                    </div>\n                  )}\n                  {searchCollections !== null &&\n                    searchCollections.map((x) => (\n                      <a key={x} href={`/collection/${x}`}>\n                        <CollectionCard handle={x} />\n                      </a>\n                    ))}\n                  {searchCollections !== null &&\n                    searchCollections.length === 0 && (\n                      <div className=\"d-flex flex-row\">\n                        <p className=\"mx-auto text-muted\" animation=\"border\">\n                          No matching collection\n                        </p>\n                      </div>\n                    )}\n                </ul>\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"profiles\">\n                <ul className=\"profile-cards-container mt-4\">\n                  {searchProfiles === null && (\n                    <div className=\"d-flex flex-row\">\n                      <Spinner className=\"mx-auto\" animation=\"border\" />\n                    </div>\n                  )}\n                  {searchProfiles !== null &&\n                    searchProfiles.map((x) => (\n                      <a key={x} href={`/profile/${x}`}>\n                        <ProfileCard address={x} />\n                      </a>\n                    ))}\n                  {searchProfiles !== null && searchProfiles.length === 0 && (\n                    <div className=\"d-flex flex-row\">\n                      <p className=\"mx-auto text-muted\" animation=\"border\">\n                        No matching profile\n                      </p>\n                    </div>\n                  )}\n                </ul>\n              </Tab.Pane>\n            </Tab.Content>\n          </Row>\n        </Tab.Container>\n      )}\n      {[\"trending\", \"top\", \"active\", \"all\"].includes(view) && (\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n          <Row>\n            <Nav variant=\"tabs\" className=\"custom-nav-tabs mt-4 constant-width\">\n              <Nav.Item\n                className=\"ms-auto text-center\"\n              >\n                <Nav.Link href=\"/explore/\" active={view === \"trending\"}>\n                  <FontAwesomeIcon icon={faBolt} className=\"me-2\" />\n                  Trending\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item className=\"text-center\">\n                <Nav.Link href=\"/explore/top\" active={view === \"top\"}>\n                  <FontAwesomeIcon icon={faFire} className=\"me-2\" />\n                  Top\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item className=\"text-center\">\n                <Nav.Link href=\"/explore/active\" active={view === \"active\"}>\n                  <FontAwesomeIcon icon={faBullseye} className=\"me-2\" />\n                  Active\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item\n                className=\"me-auto text-center\"\n              >\n                <Nav.Link href=\"/explore/all\" active={view === \"all\"}>\n                  <FontAwesomeIcon icon={faList} className=\"me-2\" />\n                  All NFTs\n                </Nav.Link>\n              </Nav.Item>\n            </Nav>\n            <hr className=\"light-border\" />\n          </Row>\n          <Row>\n            {[\"trending\", \"top\"].includes(view) &&\n              collectionList !== null && (\n                <Tab.Content>\n                  <ul className=\"collection-cards-container mt-4\">\n                    {collectionList !== null &&\n                      collectionList.map((x) => (\n                        <a key={x} href={`/collection/${x}`}>\n                          <CollectionCard handle={x} />\n                        </a>\n                      ))}\n                  </ul>\n                </Tab.Content>\n              )}\n            {[\"active\"].includes(view) &&\n              profileList !== null && (\n                <Tab.Content>\n                  <ul className=\"profile-cards-container mt-4\">\n                    {profileList !== null &&\n                      profileList.map((x) => (\n                        <a key={x} href={`/profile/${x}`}>\n                          <ProfileCard address={x} />\n                        </a>\n                      ))}\n                  </ul>\n                </Tab.Content>\n              )}\n            {view === \"all\" && (\n              <Tab.Content>\n                <Dropdown\n                  onSelect={doChangeQuery}\n                  style={{ textAlign: \"center\" }}\n                >\n                  <Dropdown.Toggle className=\"px-4 mt-4\">\n                    {queryText}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item eventKey=\"listHeight|DESC\">\n                      Newly listed\n                    </Dropdown.Item>\n                    <Dropdown.Item eventKey=\"tradeHeight|DESC\">\n                      Recently sold\n                    </Dropdown.Item>\n                    <Dropdown.Item eventKey=\"price|DESC\">\n                      Highest price\n                    </Dropdown.Item>\n                    <Dropdown.Item eventKey=\"price|ASC\">\n                      Lowest price\n                    </Dropdown.Item>\n                    <Dropdown.Item eventKey=\"tradeCount|DESC\">\n                      Highest trade count\n                    </Dropdown.Item>\n                    <Dropdown.Item eventKey=\"tradeCount|ASC\">\n                      Lowest trade count\n                    </Dropdown.Item>\n                    <Dropdown.Item eventKey=\"tradeVolume|DESC\">\n                      Highest trade volume\n                    </Dropdown.Item>\n                    <Dropdown.Item eventKey=\"tradeVolume|ASC\">\n                      Lowest trade volume\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n                <ul className=\"cards-container mt-4\">\n                  {nftList !== null &&\n                    nftList.map((x) => (\n                      <a key={x.address} href={`/nft/${x.address}`}>\n                        <NFTCard address={x.address} />\n                      </a>\n                    ))}\n                  {viewMoreEnabled && nftList !== null && !nftListEnd && (\n                    <Button onClick={onViewMore}>View more</Button>\n                  )}\n                </ul>\n              </Tab.Content>\n            )}\n          </Row>\n        </Tab.Container>\n      )}\n    </div>\n  );\n}\n\nexport default ExploreController;\n","export default __webpack_public_path__ + \"static/media/dingocoin.15331900.png\";","import \"./App.scss\";\nimport CreateController from \"./CreateController\";\nimport ProfileController from \"./ProfileController\";\nimport ExploreController from \"./ExploreController\";\nimport {\n  Navbar,\n  Nav,\n  Container,\n  Form,\n  FormControl,\n  Button,\n  Modal,\n  InputGroup,\n} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport DingocoinLogo from \"./assets/img/dingocoin.png\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n} from \"react-router-dom\";\nimport Main from \"./Main\";\n\nfunction App() {\n  const [location, setLocation] = React.useState(null);\n  React.useEffect(() => {\n    setLocation(window.location.pathname);\n  }, []);\n  React.useEffect(() => {}, [location]);\n\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [searchErrorShow, setSearchErrorShow] = React.useState(null);\n\n  const doSearch = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n\n    if (searchQuery.trim() !== \"\") {\n      window.location.assign(`/explore/search?query=${searchQuery.trim()}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar className=\"navbar\" bg=\"dark\" expand=\"lg\" sticky=\"top\">\n        <Container>\n          <Navbar.Brand href=\"/\" className=\"navbar-brand align-items-center\">\n            <img alt=\"\" src={DingocoinLogo} />\n            <span>DINGOCOIN</span>\n            <span className=\"navbar-brand-subtitle\"> NFT Platform</span>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse>\n            <Nav\n              className=\"ms-auto\"\n              style={{ paddingRight: \"1.5rem\", textAlign: \"center\" }}\n            >\n              <Nav.Link href=\"/explore\">Explore</Nav.Link>\n              <Nav.Link href=\"/create\">Create</Nav.Link>\n            </Nav>\n            <Form className=\"d-flex\" onSubmit={doSearch}>\n              <InputGroup\n                style={{\n                  minWidth: \"20rem\",\n                }}\n              >\n                <FormControl\n                  className=\"search-box\"\n                  placeholder={\"Search NFTs, collections, profiles...\"}\n                  value={searchQuery}\n                  onChange={(e) => {\n                    if (e.target.value.length <= 50) {\n                      setSearchQuery(e.target.value);\n                    }\n                  }}\n                />\n                {searchQuery !== \"\" && (\n                  <Button variant=\"secondary\" type=\"submit\">\n                    <FontAwesomeIcon icon={faAngleRight}></FontAwesomeIcon>\n                  </Button>\n                )}\n              </InputGroup>\n            </Form>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      <section className=\"section-content\">\n        {/*\n        <Router>\n          <Routes>\n            <Route index element={<Main />} />\n            <Route path=\"/profile\">\n              <Route path=\":profileAddress\" element={<ProfileController />}>\n                <Route path=\"owned\" element={<ProfileController />} />\n                <Route path=\"stats\" element={<ProfileController />} />\n              </Route>\n            </Route>\n            <Route\n              path=\"/collection/:collectionHandle\"\n              element={<ProfileController />}\n            />\n            <Route path=\"/nft/:nftAddress\" element={<ProfileController />} />\n            <Route path=\"/explore\" element={<ExploreController />}>\n              <Route path=\"top\" element={<ExploreController />} />\n              <Route path=\"active\" element={<ExploreController />} />\n              <Route path=\"all\" element={<ExploreController />} />\n              <Route path=\"search\" element={<ExploreController />} />\n            </Route>\n            <Route path=\"/create\" element={<CreateController />} />\n            <Route element={<Navigate to=\"/\" />} />\n          </Routes>\n        </Router>\n        */}\n        <p>We are down for some quick maintenance and will be back in half an hour</p>\n      </section>\n      <section>\n        <div className=\"justify-content-center section-footer align-items-center\">\n          <h6>Copyright © The Dingocoin Project 2021-2022</h6>\n        </div>\n      </section>\n\n      <Modal\n        size=\"md\"\n        centered\n        show={searchErrorShow}\n        onHide={() => setSearchErrorShow(false)}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>NFT/profile not found</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container className=\"text-center my-2\">\n            <p>No results found.</p>\n            <Button className=\"mx-2\" onClick={() => setSearchErrorShow(false)}>\n              Close\n            </Button>\n          </Container>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n","// Assets.\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction CustomDivider() {\n  return (\n    <div className=\"divider-custom\">\n      <div className=\"divider-custom-line mt-2 mb-2\"></div>\n      <div className=\"divider-custom-icon mt-2 mb-2\">\n        <FontAwesomeIcon icon={faAngleDown} />\n      </div>\n      <div className=\"divider-custom-line mt-2 mb-2\"></div>\n    </div>\n  );\n}\n\nexport default CustomDivider;\n","import { Modal, Container, Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nfunction GetWalletModal(props) {\n  return (\n    <Modal\n      size=\"md\"\n      centered\n      show={props.show}\n      onHide={props.onHide}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>\n          Browser Wallet required\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Container className=\"text-center my-2\">\n          <p>You need a Dingocoin browser wallet for this.<br/>Set it up in less than a minute.</p>\n          <a className=\"my-1\" href=\"https://dingocoin.org/wallets\" target=\"_blank\" rel=\"noreferrer\">\n            <Button className=\"mx-2\">Get Chrome wallet</Button>\n          </a>\n          <a className=\"my-1\" href=\"https://dingocoin.org/wallets\" target=\"_blank\" rel=\"noreferrer\">\n            <Button className=\"mx-2\">Get Firefox wallet</Button>\n          </a>\n        </Container>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default GetWalletModal;\n"],"sourceRoot":""}