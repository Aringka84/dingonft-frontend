{"version":3,"sources":["api.js","utils.js","NFTCard.jsx","CollectionCard.jsx","ProfileController.jsx","SearchController.jsx","assets/img/dingocoin.png","App.jsx","index.jsx","CustomDivider.jsx","GetWalletModal.jsx"],"names":["API_URL","getBusy","data","a","post","address","result","busy","getContent","timestamp","signature","getBuyTransaction","price","sendBuyTransaction","transaction","getRepriceTransaction","sendRepriceTransaction","getListTransaction","contentHash","royalty","sendListTransaction","content","preview","name","description","tags","updateProfile","owner","thumbnail","getProfileCreatedNfts","getProfileOwnedNfts","getProfileHistoricalNfts","getProfileStats","getProfileCreatedCount","getProfileCollectionCount","getProfileHistoricalCount","queryProfileBySearch","search","queryProfileByTradeCount","queryProfileByEarnings","queryNft","key","direction","offset","limit","queryNftBySearch","queryNftByNewest","beforeId","getCollectionStats","handle","queryCollectionByOwner","queryCollectionBySearch","queryUnassignedNftsByOwner","createCollection","updateCollection","setCollectionItem","getCollectionItems","getItemCollection","queryCollectionByTradeCountScaled","queryCollectionByTradeVolume","getPlatformStats","toSatoshi","x","undefined","Error","BigInt","Web3Utils","toWei","toString","toLocaleString","isNegative","integer","replace","satoshiToLocaleString","link","controller","AbortController","setTimeout","abort","fetch","withCredentials","method","signal","headers","Accept","body","JSON","stringify","json","NFTCard","CollectionCard","ProfileController","SearchController","App","React","useState","location","setLocation","useEffect","window","pathname","searchQuery","setSearchQuery","searchErrorShow","setSearchErrorShow","doSearch","e","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","trim","assign","className","Navbar","bg","expand","sticky","Brand","href","alt","src","DingocoinLogo","Toggle","Collapse","Nav","Form","onSubmit","InputGroup","style","minWidth","FormControl","placeholder","value","onChange","target","length","Button","variant","type","icon","faAngleRight","Link","Dropdown","as","NavItem","NavLink","Menu","Item","faThLarge","faList","faUserCircle","Modal","size","centered","show","onHide","Header","closeButton","Title","Body","Container","onClick","ReactDOM","render","document","getElementById","CustomDivider","faAngleDown","GetWalletModal","props","rel"],"mappings":"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","file":"static/js/main.798298e4.chunk.js","sourcesContent":["import { post } from \"./utils\";\n\nconst API_URL = \"https://nftp0.dingocoin.io\";\n//const API_URL = \"http://localhost:33332\";\n\nconst getBusy = async (data) => {\n  const result = await post(`${API_URL}/nft/getBusy`, {\n    address: data.address,\n  });\n  if (result === null) {\n    return null;\n  } else {\n    return result.busy;\n  }\n};\n\nconst getContent = (data) => {\n  return post(`${API_URL}/nft/getContent`, {\n    address: data.address,\n    timestamp: data.timestamp,\n    signature: data.signature,\n  });\n};\n\nconst getBuyTransaction = (data) => {\n  return post(`${API_URL}/nft/getBuyTransaction`, {\n    address: data.address,\n    price: data.price,\n  });\n};\n\nconst sendBuyTransaction = (data) => {\n  return post(`${API_URL}/nft/sendBuyTransaction`, {\n    transaction: data.transaction,\n  });\n};\n\nconst getRepriceTransaction = (data) => {\n  return post(`${API_URL}/nft/getRepriceTransaction`, {\n    address: data.address,\n    price: data.price,\n  });\n};\n\nconst sendRepriceTransaction = (data) => {\n  return post(`${API_URL}/nft/sendRepriceTransaction`, {\n    transaction: data.transaction,\n  });\n};\n\nconst getListTransaction = (data) => {\n  return post(`${API_URL}/nft/getListTransaction`, {\n    contentHash: data.contentHash,\n    price: data.price,\n    royalty: data.royalty,\n  });\n};\n\nconst sendListTransaction = (data) => {\n  return post(`${API_URL}/nft/sendListTransaction`, {\n    content: data.content,\n    preview: data.preview,\n    name: data.name,\n    description: data.description,\n    tags: data.tags,\n    transaction: data.transaction,\n  });\n};\n\nconst updateProfile = (data) => {\n  return post(`${API_URL}/profile/update`, {\n    timestamp: data.timestamp,\n    owner: data.owner,\n    name: data.name,\n    thumbnail: data.thumbnail,\n    signature: data.signature,\n  });\n};\n\nconst getProfileCreatedNfts = (data) => {\n  return post(`${API_URL}/profile/getCreatedNfts`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileOwnedNfts = (data) => {\n  return post(`${API_URL}/profile/getOwnedNfts`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileHistoricalNfts = (data) => {\n  return post(`${API_URL}/profile/getHistoricalNfts`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileStats = (data) => {\n  return post(`${API_URL}/profile/getStats`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileCreatedCount = (data) => {\n  return post(`${API_URL}/profile/getCreatedCount`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileCollectionCount = (data) => {\n  return post(`${API_URL}/profile/getCollectionCount`, {\n    owner: data.owner,\n  });\n};\n\nconst getProfileHistoricalCount = (data) => {\n  return post(`${API_URL}/profile/getHistoricalCount`, {\n    owner: data.owner,\n  });\n};\n\nconst queryProfileBySearch = (data) => {\n  return post(`${API_URL}/profile/queryBySearch`, {\n    search: data.search,\n  });\n};\n\nconst queryProfileByTradeCount = (data) => {\n  return post(`${API_URL}/profile/queryByTradeCount`, {});\n};\n\nconst queryProfileByEarnings = (data) => {\n  return post(`${API_URL}/profile/queryByEarnings`, {});\n};\n\nconst queryNft = (data) => {\n  return post(`${API_URL}/nft/query`, {\n    key: data.key,\n    direction: data.direction,\n    offset: data.offset,\n    limit: data.limit,\n  });\n};\n\nconst queryNftBySearch = (data) => {\n  return post(`${API_URL}/nft/queryBySearch`, {\n    search: data.search,\n  });\n};\n\nconst queryNftByNewest = (data) => {\n  return post(`${API_URL}/nft/queryByNewest`, {\n    beforeId: data.beforeId,\n  });\n};\n\nconst getCollectionStats = (data) => {\n  return post(`${API_URL}/collection/getStats`, {\n    handle: data.handle,\n  });\n};\n\nconst queryCollectionByOwner = (data) => {\n  return post(`${API_URL}/collection/queryByOwner`, {\n    owner: data.owner,\n  });\n};\n\nconst queryCollectionBySearch = (data) => {\n  return post(`${API_URL}/collection/queryBySearch`, {\n    search: data.search,\n  });\n};\n\nconst queryUnassignedNftsByOwner = (data) => {\n  return post(`${API_URL}/collection/queryUnassignedNftsByOwner`, {\n    owner: data.owner,\n  });\n};\n\nconst createCollection = (data) => {\n  return post(`${API_URL}/collection/create`, {\n    timestamp: data.timestamp,\n    owner: data.owner,\n    handle: data.handle,\n    name: data.name,\n    thumbnail: data.thumbnail,\n    description: data.description,\n    signature: data.signature,\n  });\n};\n\nconst updateCollection = (data) => {\n  return post(`${API_URL}/collection/update`, {\n    timestamp: data.timestamp,\n    handle: data.handle,\n    name: data.name,\n    thumbnail: data.thumbnail,\n    description: data.description,\n    signature: data.signature,\n  });\n};\n\nconst setCollectionItem = (data) => {\n  return post(`${API_URL}/collection/setItem`, {\n    timestamp: data.timestamp,\n    address: data.address,\n    handle: data.handle,\n    signature: data.signature,\n  });\n};\n\nconst getCollectionItems = (data) => {\n  return post(`${API_URL}/collection/getItems`, {\n    handle: data.handle,\n  });\n};\n\nconst getItemCollection = (data) => {\n  return post(`${API_URL}/collection/getItemCollection`, {\n    address: data.address,\n  });\n};\n\nconst queryCollectionByTradeCountScaled = () => {\n  return post(`${API_URL}/collection/queryByTradeCountScaled`, {});\n};\n\nconst queryCollectionByTradeVolumeScaled = () => {\n  return post(`${API_URL}/collection/queryByTradeVolumeScaled`, {});\n};\n\nconst queryCollectionByTradeVolume = () => {\n  return post(`${API_URL}/collection/queryByTradeVolume`, {});\n};\n\nconst queryCollectionByValuable = () => {\n  return post(`${API_URL}/collection/queryByValuable`, {});\n};\n\nconst getPlatformStats = () => {\n  return post(`${API_URL}/getPlatformStats`, {});\n};\n\nexport {\n  getBusy,\n  getContent,\n  getBuyTransaction,\n  sendBuyTransaction,\n  getRepriceTransaction,\n  sendRepriceTransaction,\n  getListTransaction,\n  sendListTransaction,\n  updateProfile,\n  getProfileCreatedNfts,\n  getProfileOwnedNfts,\n  getProfileHistoricalNfts,\n  getProfileStats,\n  getProfileCreatedCount,\n  getProfileCollectionCount,\n  getProfileHistoricalCount,\n  queryProfileBySearch,\n  queryProfileByTradeCount,\n  queryProfileByEarnings,\n  queryNft,\n  queryNftBySearch,\n  queryNftByNewest,\n  createCollection,\n  updateCollection,\n  getCollectionStats,\n  queryCollectionByOwner,\n  queryCollectionBySearch,\n  queryUnassignedNftsByOwner,\n  setCollectionItem,\n  getCollectionItems,\n  getItemCollection,\n  queryCollectionByTradeCountScaled,\n  queryCollectionByTradeVolumeScaled,\n  queryCollectionByTradeVolume,\n  queryCollectionByValuable,\n  getPlatformStats\n};\n","/* global BigInt */\n\nimport Web3Utils from \"web3-utils\";\n\nconst toSatoshi = (x) => {\n  if (x === null || x === undefined || typeof x !== \"string\" || x === \"\") {\n    throw new Error(\"Expected string input\");\n  }\n  return (BigInt(Web3Utils.toWei(x, \"gwei\")) / 10n).toString();\n};\n\nconst toLocaleString = (x) => {\n  const isNegative = BigInt(x) < 0n;\n  if (isNegative) {\n    x = -x;\n  }\n  const integer = BigInt(x).toString();\n  return (\n    (isNegative ? \"-\" : \"\") + `${integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`\n  );\n};\n\nconst satoshiToLocaleString = (x) => {\n  const isNegative = BigInt(x) < 0n;\n  if (isNegative) {\n    x = -x;\n  }\n  const integer = (BigInt(x) / 100000000n).toString();\n  return (\n    (isNegative ? \"-\" : \"\") + `${integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`\n  );\n};\n\nconst post = async (link, data) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 300000);\n  return (\n    await fetch(link, {\n      withCredentials: true,\n      method: \"POST\",\n      signal: controller.signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n  ).json();\n};\n\nconst get = (link) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 300000);\n  return fetch(link, {\n    withCredentials: true,\n    method: \"GET\",\n    signal: controller.signal,\n  });\n};\n\nexport { toSatoshi, toLocaleString, satoshiToLocaleString, post, get };\n","import React from \"react\";\nimport { getMeta, getPreviewLink, getState } from \"./storage\";\nimport { Card } from \"react-bootstrap\";\nimport { satoshiToLocaleString } from \"./utils\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCashRegister,\n  faExchangeAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  getItemCollection,\n} from \"./api\";\nimport {\n  getCollection,\n  getProfile\n} from \"./storage\";\n\nconst nameOrAddress = (x) => {\n  if (x.name === null || x.name === undefined || x.name.trim() === \"\") {\n    return x.address;\n  } else {\n    return x.name;\n  }\n};\n\nfunction NFTCard(props) {\n  const domRef = React.useRef();\n  const [isVisible, setVisible] = React.useState(false);\n  const [previewLink, setPreviewLink] = React.useState(null);\n  const [name, setName] = React.useState(null);\n  const [stats, setStats] = React.useState(null);\n  const [collection, setCollection] = React.useState(undefined);\n  const [profile, setProfile] = React.useState(undefined);\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setVisible(true);\n        }\n      });\n    });\n    observer.observe(domRef.current);\n    return () => {\n      try {\n        observer.unobserve(domRef.current);\n      } catch {}\n    };\n  }, []);\n\n  React.useEffect(() => {\n    (async () => {\n      if (isVisible) {\n        const meta = await getMeta(props.address);\n        const previewLink = await getPreviewLink(props.address);\n        const state = await getState(props.address);\n\n        setPreviewLink(previewLink);\n        setName(meta === null ? null : meta.name);\n        setStats(state === null ? null : state.stats);\n\n        const collectionHandle = (\n          await getItemCollection({\n            address: props.address\n          })\n        ).handle;\n        if (collectionHandle === null) {\n          setCollection(null);\n          let profile = await getProfile(state.creator);\n          if (profile === null) {\n            profile = {};\n          }\n          profile.address = state.creator;\n          setProfile(profile);\n        } else {\n          const collection = await getCollection(collectionHandle);\n          collection.handle = collectionHandle;\n          setCollection(collection);\n          setProfile(null);\n        }\n      }\n    })();\n  }, [props.address, isVisible]);\n\n  return (\n    <Card\n      className=\"nft-card floating-borders floating-borders-press\"\n      ref={domRef}\n    >\n      <div className=\"header-box\">\n        <div className=\"spinner\">\n          <div className=\"spinner-border text-primary\" role=\"status\"></div>\n        </div>\n        <Card.Img variant=\"top\" src={previewLink} loading=\"lazy\"></Card.Img>\n      </div>\n      <hr />\n      <Card.Body>\n        <Card.Title className=\"text-start\">\n          {name === null ? \"-\" : name === \"\" ? \"Unnamed NFT\" : name}\n        </Card.Title>\n        <Card.Subtitle className=\"text-start\">\n          {(collection === undefined || profile === undefined) && <span>&nbsp;</span>}\n          {collection !== undefined && collection !== null && (<div className=\"text-truncate\"><b>In</b> <a className=\"simple-link\" href={`/collection/${collection.handle}`}>{collection.name}</a></div>)}\n          {profile !== undefined && profile !== null && (<div className=\"text-truncate\"><b>By</b> <a className=\"simple-link\" href={`/profile/${profile.address}`}>{profile.name || profile.address}</a></div>)}\n        </Card.Subtitle>\n        <Card.Text>\n          <span className=\"card-price\">\n            {stats === null ? \"-\" : satoshiToLocaleString(stats.price)}\n          </span>\n          <br />\n          <span className=\"card-price-subtitle\">DINGO</span>\n        </Card.Text>\n      </Card.Body>\n      <hr />\n      <div className=\"card-sub-body text-muted\">\n        <span className=\"align-middle\">\n          <FontAwesomeIcon icon={faCashRegister} />{\" \"}\n          {stats === null ? \"-\" : satoshiToLocaleString(stats.tradeVolume)}\n        </span>\n        &nbsp;&nbsp;&nbsp;\n        <span className=\"align-middle\">\n          <FontAwesomeIcon icon={faExchangeAlt} />{\" \"}\n          {stats === null ? \"-\" : stats.tradeCount}\n        </span>\n      </div>\n    </Card>\n  );\n}\n\nexport default NFTCard;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { getCollection, getPreviewLink } from \"./storage\";\nimport { getCollectionStats } from \"./api\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faList,\n  faCashRegister,\n  faExchangeAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { toLocaleString } from \"./utils\";\n\nfunction CollectionCard(props) {\n  const domRef = React.useRef();\n  const [isVisible, setVisible] = React.useState(false);\n  const [previewLink, setPreviewLink] = React.useState(null);\n  const [collection, setCollection] = React.useState(null);\n  const [stats, setStats] = React.useState(null);\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setVisible(true);\n        }\n      });\n    });\n    observer.observe(domRef.current);\n    return () => {\n      try {\n        observer.unobserve(domRef.current);\n      } catch {}\n    };\n  }, []);\n\n  React.useEffect(() => {\n    (async () => {\n      if (isVisible) {\n        const collection = await getCollection(props.handle);\n        setCollection(collection);\n\n        if (collection !== null) {\n          setPreviewLink(getPreviewLink(collection.thumbnail));\n\n          const stats = await getCollectionStats({ handle: props.handle });\n          setStats(stats);\n        }\n      }\n    })();\n  }, [isVisible, props.handle]);\n\n  return (\n    <Container className=\"collection-card-holder\" ref={domRef}>\n      {collection === null ||\n        (stats === null && (\n          <div className=\"collection-card d-flex flex-column\">\n            <div className=\"d-flex flex-row my-auto\">\n              <div className=\"spinner mx-auto\">\n                <div\n                  className=\"spinner-border text-primary\"\n                  role=\"status\"\n                ></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      {collection !== null && stats !== null && (\n        <div className=\"collection-card d-flex flex-column\">\n          <img className=\"mx-auto mt-4 mb-3\" src={previewLink} />\n          <span className=\"mx-auto title\">\n            {collection !== null && collection.name}\n          </span>\n          <span className=\"truncate text-muted description\">\n            {collection !== null && collection.description}\n          </span>\n          <hr className=\"mt-auto\" />\n          <div className=\"d-flex flex-row text-muted card-sub-body\">\n            <span className=\"ms-auto\">\n              <FontAwesomeIcon icon={faList} />{\" \"}\n              {stats === null ? \"-\" : stats.count}\n            </span>\n            &nbsp;&nbsp;&nbsp;\n            <span>\n              <FontAwesomeIcon icon={faCashRegister} />{\" \"}\n              {stats === null ? \"-\" : toLocaleString(stats.tradeVolume)}\n            </span>\n            &nbsp;&nbsp;&nbsp;\n            <span className=\"me-auto\">\n              <FontAwesomeIcon icon={faExchangeAlt} />{\" \"}\n              {stats === null ? \"-\" : stats.tradeCount}\n            </span>\n          </div>\n        </div>\n      )}\n    </Container>\n  );\n}\n\nexport default CollectionCard;\n","/* global BigInt */\n\nimport {\n  Button,\n  Form,\n  Nav,\n  Dropdown,\n  DropdownButton,\n  Image,\n  Spinner\n} from \"react-bootstrap\";\nimport React from \"react\";\nimport Sha256 from \"crypto-js/sha256\";\nimport Hex from \"crypto-js/enc-hex\";\nimport { getMeta, getState, getProfile, getPreviewLink } from \"./storage\";\nimport { toSatoshi } from \"./utils\";\nimport NFTCard from \"./NFTCard\";\nimport {\n  createCollection,\n  getBusy,\n  getBuyTransaction,\n  getCollectionItems,\n  getContent,\n  getItemCollection,\n  getProfileCreatedNfts,\n  getProfileHistoricalNfts,\n  getProfileOwnedNfts,\n  getProfileStats,\n  getRepriceTransaction,\n  queryCollectionByOwner,\n  queryUnassignedNftsByOwner,\n  sendBuyTransaction,\n  sendRepriceTransaction,\n  setCollectionItem,\n  updateCollection,\n  updateProfile,\n} from \"./api\";\nimport GetWalletModal from \"./GetWalletModal\";\nimport CollectionCard from \"./CollectionCard\";\nimport CreateCollectionModal from \"./CreateCollectionModal\";\nimport EditCollectionModal from \"./EditCollectionModal\";\nimport EditProfileModal from \"./EditProfileModal\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { getCollection } from \"./storage\";\nimport {\n  faCashRegister,\n  faExchangeAlt,\n  faPlus,\n  faPen,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { toLocaleString, satoshiToLocaleString } from \"./utils\";\nimport ProfileCard from \"./ProfileCard\";\n\nfunction ProfileController() {\n  const { profileAddress, collectionHandle, nftAddress } = useParams();\n  const location = useLocation();\n  const view =\n    profileAddress !== undefined\n      ? location.pathname.endsWith(\"/owned\")\n        ? \"profileOwned\"\n        : location.pathname.endsWith(\"/stats\")\n        ? \"profileStats\"\n        : \"profile\"\n      : collectionHandle !== undefined\n      ? \"collection\"\n      : nftAddress !== undefined\n      ? \"nft\"\n      : \"unknown\";\n\n  // Variables always required.\n  const [editProfileShow, setEditProfileShow] = React.useState(null);\n  const [profile, setProfile] = React.useState(null);\n\n  // For profile view.\n  const [createCollectionShow, setCreateCollectionShow] = React.useState(false);\n  const [collections, setCollections] = React.useState(null);\n  const [unassignedList, setUnassignedList] = React.useState(null);\n  const [profileLists, setProfileLists] = React.useState(null);\n  const [profileStats, setProfileStats] = React.useState(null);\n\n  // For collection view.\n  const [collection, setCollection] = React.useState(null);\n  const [collectionItems, setCollectionItems] = React.useState(null);\n  const [editCollectionShow, setEditCollectionShow] = React.useState(false);\n\n  // For NFT view.\n  const [nftMeta, setNftMeta] = React.useState(null);\n  const [nftState, setNftState] = React.useState(null);\n  const [nftItemCollection, setNftItemCollection] = React.useState(undefined);\n  const [nftOwner, setNftOwner] = React.useState(undefined);\n  const [nftBusy, setNftBusy] = React.useState(undefined);\n  const [resellPrice, setResellPrice] = React.useState(\"\");\n  const [resellPriceError, setResellPriceError] = React.useState(\"\");\n  const [buyResult, setBuyResult] = React.useState(null);\n  const [repricePrice, setRepricePrice] = React.useState(\"\");\n  const [repricePriceError, setRepricePriceError] = React.useState(\"\");\n  const [repriceResult, setRepriceResult] = React.useState(null);\n  const [downloadLink, setDownloadLink] = React.useState(null);\n\n  const [getWalletShow, setGetWalletShow] = React.useState(false);\n\n  // Initialize for profile view, commons.\n  React.useEffect(() => {\n    if (view.startsWith(\"profile\")) {\n      (async () => {\n        // Retrieve and set profile.\n        let profile = await getProfile(profileAddress);\n        if (profile === null) {\n          profile = {};\n        }\n        profile.address = profileAddress;\n        setProfile(profile);\n      })();\n    }\n  }, []);\n\n  // Initialize for profile view (cretions).\n  React.useEffect(() => {\n    if (view === \"profile\") {\n      (async () => {\n        // Retrieve and set collections.\n        const collections = await queryCollectionByOwner({\n          owner: profileAddress,\n        });\n        if (collections !== null) {\n          setCollections(collections.reverse());\n        }\n\n        // Retrieve and set unassigned list.\n        const unassignedList = await queryUnassignedNftsByOwner({\n          owner: profileAddress,\n        });\n        setUnassignedList(unassignedList.reverse());\n      })();\n    }\n  }, []);\n\n  // Initialize for profileOwned view.\n  React.useEffect(() => {\n    if (view === \"profileOwned\") {\n      (async () => {\n        setProfileLists({\n          createdNfts: (\n            await getProfileCreatedNfts({ owner: profileAddress })\n          ).results.reverse(),\n          ownedNfts: (\n            await getProfileOwnedNfts({ owner: profileAddress })\n          ).results.reverse(),\n          historicalNfts: (\n            await getProfileHistoricalNfts({ owner: profileAddress })\n          ).results.reverse(),\n        });\n      })();\n    }\n  }, []);\n\n  // Initialize for profileStats view.\n  React.useEffect(() => {\n    if (view === \"profileStats\") {\n      (async () => {\n        setProfileStats(await getProfileStats({ owner: profileAddress }));\n        console.log(await getProfileStats({ owner: profileAddress }));\n      })();\n    }\n  }, []);\n\n  // Initialize for collection view.\n  React.useEffect(() => {\n    (async () => {\n      if (view === \"collection\") {\n        const collection = await getCollection(collectionHandle);\n        collection.handle = collectionHandle;\n        setCollection(collection);\n        let profile = await getProfile(collection.owner);\n        if (profile === null) {\n          profile = {};\n        }\n        profile.address = collection.owner;\n        setProfile(profile);\n        setCollectionItems(\n          (await getCollectionItems({ handle: collectionHandle })).reverse()\n        );\n      }\n    })();\n  }, []);\n\n  // Initialize for nft view.\n  React.useEffect(() => {\n    (async () => {\n      if (view === \"nft\") {\n        const nftMeta = await getMeta(nftAddress);\n        setNftMeta(nftMeta);\n        const nftState = await getState(nftAddress);\n        setNftState(nftState);\n\n        const nftItemCollectionHandle = (\n          await getItemCollection({\n            address: nftAddress,\n          })\n        ).handle;\n        if (nftItemCollectionHandle === null) {\n          setNftItemCollection(null);\n        } else {\n          const collection = await getCollection(nftItemCollectionHandle);\n          collection.handle = nftItemCollectionHandle;\n          setNftItemCollection(collection);\n        }\n\n        if (nftState !== null && nftState.owner !== nftState.creator) {\n          let nftOwner = await getProfile(nftState.owner);\n          if (nftOwner === null) {\n            nftOwner = {};\n          }\n          nftOwner.address = nftState.owner;\n          setNftOwner(nftOwner);\n        } else {\n          setNftOwner(null);\n        }\n\n        if (nftState !== null && nftMeta !== null) {\n          let profile = await getProfile(nftState.creator);\n          if (profile === null) {\n            profile = {};\n          }\n          profile.address = nftState.creator;\n          setProfile(profile);\n        }\n\n        setNftBusy(await getBusy({ address: nftAddress }));\n      }\n    })();\n  }, []);\n\n  // Effect for NFT view.\n  React.useEffect(() => {\n    if (resellPrice === \"\") {\n      setResellPriceError(\"Resell price required\");\n    } else if (nftState !== null) {\n      if (\n        BigInt(toSatoshi(resellPrice)) >\n        BigInt(10) * BigInt(nftState.stats.price)\n      ) {\n        setResellPriceError(\n          `Resell price must be at most 10x the current price`\n        );\n      } else {\n        setResellPriceError(\"\");\n      }\n    } else {\n      setResellPriceError(\"\");\n    }\n  }, [resellPrice, nftState]);\n  React.useEffect(() => {\n    if (repricePrice === \"\") {\n      setRepricePriceError(\"Reprice price required\");\n    } else {\n      setRepricePriceError(\"\");\n    }\n  }, [repricePrice]);\n\n  const doEditProfileSubmit = async (profile) => {\n    if (window.dingo === undefined) {\n      setGetWalletShow(true);\n      return;\n    }\n\n    const payload = {\n      timestamp: Date.now(),\n      owner: profileAddress,\n      name: profile.name,\n      thumbnail: profile.thumbnail,\n    };\n    const message = JSON.stringify(payload);\n\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    const updateResult = await updateProfile(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doCreateCollectionSubmit = async (collection) => {\n    // Create payload and signature message.\n    const payload = {\n      timestamp: Date.now(),\n      owner: profileAddress,\n      handle: collection.handle,\n      name: collection.name,\n      thumbnail: collection.thumbnail,\n      description: collection.description,\n    };\n    const message = JSON.stringify(payload);\n\n    // Sign.\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    // Send.\n    const updateResult = await createCollection(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doEditCollectionSubmit = async (collection) => {\n    // Create payload and signature message.\n    const payload = {\n      timestamp: Date.now(),\n      handle: collection.handle,\n      name: collection.name,\n      thumbnail: collection.thumbnail,\n      description: collection.description,\n    };\n    const message = JSON.stringify(payload);\n\n    // Sign.\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    // Send.\n    const updateResult = await updateCollection(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doMove = async (address, handle) => {\n    // Create payload and signature message.\n    const payload = {\n      timestamp: Date.now(),\n      address: address,\n      handle: handle,\n    };\n    const message = JSON.stringify(payload);\n\n    // Sign.\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n    payload.signature = signResult.result;\n\n    // Send.\n    const updateResult = await setCollectionItem(payload);\n    if (\"error\" in updateResult) {\n      return;\n    }\n\n    window.location.reload(false);\n  };\n\n  const doDownload = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (window.dingo === undefined) {\n      setGetWalletShow(true);\n      return;\n    }\n\n    const timestamp = Date.now();\n    const message = `${nftAddress}|${timestamp}`;\n    const signResult = await window.dingo.requestSign(\n      Hex.stringify(Sha256(message))\n    );\n    if (signResult.error !== undefined) {\n      return;\n    }\n\n    const result = await getContent({\n      address: nftAddress,\n      timestamp: timestamp,\n      signature: signResult.result,\n    });\n    if (result === null || result.error !== undefined) {\n      return;\n    }\n\n    if (result.content !== undefined) {\n      setDownloadLink(result.content);\n    }\n  };\n\n  const doBuy = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (window.dingo === undefined) {\n      setGetWalletShow(true);\n      return;\n    }\n\n    const { vins, vouts } = await getBuyTransaction({\n      address: nftAddress,\n      price: toSatoshi(resellPrice),\n    });\n    const signed = (await window.dingo.requestSignTransaction(vins, vouts))\n      .result;\n    if (signed === null || signed === undefined) {\n      return;\n    }\n\n    const result = await sendBuyTransaction({ transaction: signed });\n    setBuyResult(result);\n  };\n\n  const doReprice = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (window.dingo === undefined) {\n      setGetWalletShow(true);\n      return;\n    }\n\n    const { vins, vouts } = await getRepriceTransaction({\n      address: nftAddress,\n      price: toSatoshi(repricePrice),\n    });\n\n    const signed = (await window.dingo.requestSignTransaction(vins, vouts))\n      .result;\n    if (signed === null || signed === undefined) {\n      return;\n    }\n\n    const result = await sendRepriceTransaction({ transaction: signed });\n    setRepriceResult(result);\n  };\n\n  return (\n    <div className=\"profile-container justify-content-center mx-auto\">\n      {view.startsWith(\"profile\") && profile !== null && (\n        <div className=\"profile-section profile-header pt-3\">\n          <div className=\"d-flex flex-row\">\n            <span\n              className=\"clickable ms-auto\"\n              onClick={() => setEditProfileShow(true)}\n            >\n              <FontAwesomeIcon className=\"me-1\" icon={faPen} /> Edit\n            </span>\n          </div>\n          <div className=\"d-flex flex-row\">\n            <ul className=\"profile-cards-container mt-4 mx-auto mb-4\">\n              <ProfileCard address={profileAddress} />\n            </ul>\n          </div>\n          <hr />\n          <Nav variant=\"tabs\" className=\"custom-nav-tabs\">\n            <Nav.Item>\n              <Nav.Link\n                eventKey=\"creations\"\n                active={\n                  view === \"profile\" || view === \"collection\" || view === \"nft\"\n                }\n                href={`/profile/${profile.address}/`}\n              >\n                NFT creations\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                eventKey=\"unassigned\"\n                active={view === \"profileOwned\"}\n                href={`/profile/${profile.address}/owned`}\n              >\n                Owned NFTs\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                eventKey=\"unassigned\"\n                active={view === \"profileStats\"}\n                href={`/profile/${profile.address}/stats`}\n              >\n                Stats\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </div>\n      )}\n\n      {view === \"profile\" && (\n        <div className=\"profile-section py-3\">\n          <div className=\"d-flex flex-row content-header\">\n            <span className=\"me-auto content-title accent\">Collections</span>\n            <span\n              className=\"clickable\"\n              onClick={() => setCreateCollectionShow(true)}\n            >\n              <FontAwesomeIcon className=\"me-1\" icon={faPlus} /> Create new\n            </span>\n          </div>\n          {collections !== null && collections.length > 0 && (\n            <ul className=\"collection-cards-container mt-4\">\n              {collections.map((x) => (\n                <a key={x} href={`/collection/${x}`}>\n                  <CollectionCard handle={x} />\n                </a>\n              ))}\n            </ul>\n          )}\n          {collections !== null && collections.length === 0 && (\n            <div className=\"d-flex flex-row mt-2 mb-2\">\n              <span className=\"mx-auto text-muted\">User has no collection</span>\n            </div>\n          )}\n        </div>\n      )}\n\n      {view === \"profile\" &&\n        unassignedList !== null &&\n        unassignedList.length > 0 && (\n          <div className=\"profile-section py-3\">\n            <div className=\"d-flex flex-row content-header\">\n              <span className=\"me-auto content-title accent\">\n                Unassigned NFTs\n              </span>\n            </div>\n            <ul className=\"cards-container mt-4\">\n              {unassignedList.map((x) => (\n                <div key={x}>\n                  <a href={`/nft/${x}`}>\n                    <NFTCard address={x} />\n                  </a>\n                  <DropdownButton\n                    className=\"mt-2 mb-4 px-4\"\n                    title=\"Move to collection\"\n                  >\n                    {collections !== null &&\n                      collections.map((y) => (\n                        <Dropdown.Item key={y} onClick={() => doMove(x, y)}>\n                          {y}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                </div>\n              ))}\n            </ul>\n          </div>\n        )}\n\n      {view === \"profileOwned\" && profileLists !== null && (\n        <div className=\"profile-section py-3\">\n          <div className=\"d-flex flex-row content-header\">\n            <span className=\"me-auto content-title accent\">Owned NFTs</span>\n          </div>\n          {profileLists.ownedNfts.filter(\n            (x) => !profileLists.createdNfts.some((y) => y === x)\n          ).length > 0 && (\n            <ul className=\"cards-container mt-4\">\n              {profileLists.ownedNfts\n                .filter((x) => !profileLists.createdNfts.some((y) => y === x))\n                .map((x) => (\n                  <a key={x} href={`/nft/${x}`}>\n                    <NFTCard address={x} />\n                  </a>\n                ))}\n            </ul>\n          )}\n          {profileLists.ownedNfts.filter(\n            (x) => !profileLists.createdNfts.some((y) => y === x)\n          ).length === 0 && (\n            <div className=\"d-flex flex-row mt-2 mb-2\">\n              <span className=\"mx-auto text-muted\">User has no owned NFT</span>\n            </div>\n          )}\n        </div>\n      )}\n\n      {view === \"profileOwned\" &&\n        profileLists !== null &&\n        profileLists.historicalNfts\n          .filter((x) => !profileLists.createdNfts.some((y) => y === x))\n          .filter((x) => !profileLists.ownedNfts.some((y) => y === x)).length >\n          0 && (\n          <div className=\"profile-section py-3\">\n            <div className=\"d-flex flex-row content-header\">\n              <span className=\"me-auto content-title accent\">\n                Previously owned NFTs\n              </span>\n            </div>\n            <ul className=\"cards-container mt-4\">\n              {profileLists.historicalNfts\n                .filter((x) => !profileLists.createdNfts.some((y) => y === x))\n                .filter((x) => !profileLists.ownedNfts.some((y) => y === x))\n                .map((x) => (\n                  <a key={x} href={`/nft/${x}`}>\n                    <NFTCard address={x} />\n                  </a>\n                ))}\n            </ul>\n          </div>\n        )}\n\n      {view === \"profileStats\" && profileStats !== null && (\n        <div className=\"profile-section py-3\">\n          <div className=\"d-flex flex-row content-header\">\n            <span className=\"me-auto content-title accent\">Profile Stats</span>\n          </div>\n          <div className=\"mt-4 px-2\">\n            <p>\n              <b>NFT creations</b>\n              <ul>\n                <li>NFTs created: {profileStats.listCount}</li>\n                <li>Times sold: {profileStats.listSoldCount}</li>\n                <li>\n                  Total royalties:{\" \"}\n                  {satoshiToLocaleString(profileStats.royaltyVolume)}\n                </li>\n              </ul>\n            </p>\n\n            <p>\n              <b>Trades</b>\n              <ul>\n                <li>NFTs bought/sold: {profileStats.tradeCount}</li>\n                <li>\n                  Total purchases:{\" \"}\n                  {satoshiToLocaleString(profileStats.buyVolume)}\n                </li>\n                <li>\n                  Total sales: {satoshiToLocaleString(profileStats.sellVolume)}\n                </li>\n              </ul>\n            </p>\n\n            <p>\n              <b>Overall</b>\n              <ul>\n                <li>\n                  Total Earnings:{\" \"}\n                  {satoshiToLocaleString(\n                    BigInt(profileStats.royaltyVolume) +\n                      BigInt(profileStats.sellVolume) -\n                      BigInt(profileStats.buyVolume)\n                  )}\n                </li>\n              </ul>\n            </p>\n          </div>\n        </div>\n      )}\n\n      {view === \"collection\" && collection !== null && (\n        <div className=\"profile-section py-3\">\n          {profile !== null && (\n            <div className=\"d-flex flex-row content-header\">\n              <div\n                className=\"text-truncate me-auto\"\n                style={{ display: \"inline\" }}\n              >\n                <span className=\"content-title accent\">Collection by: </span>\n                <a\n                  className=\"simple-link\"\n                  href={`/profile/${profile.address}/`}\n                >\n                  {profile.name === \"\" ||\n                  profile.name === null ||\n                  profile.name === undefined\n                    ? profile.address\n                    : profile.name}\n                </a>\n              </div>\n              <span\n                className=\"clickable ms-auto\"\n                onClick={() => setEditCollectionShow(true)}\n              >\n                <nobr>\n                  <FontAwesomeIcon className=\"me-1\" icon={faPen} /> Edit\n                </nobr>\n              </span>\n            </div>\n          )}\n          <div className=\"d-flex flex-row\">\n            <ul className=\"collection-cards-container mt-4 mx-auto mb-4\">\n              <CollectionCard handle={collectionHandle} />\n            </ul>\n          </div>\n        </div>\n      )}\n      {view === \"collection\" && collection !== null && (\n        <div className=\"profile-section py-3\">\n          <ul className=\"cards-container mt-4\">\n            {collectionItems !== null &&\n              collectionItems.map((x) => (\n                <a key={x} href={`/nft/${x}`}>\n                  <NFTCard address={x} />\n                </a>\n              ))}\n          </ul>\n        </div>\n      )}\n\n      {view === \"nft\" && nftMeta !== null && nftItemCollection !== undefined && (\n        <div className=\"profile-section-transparent\">\n          <div className=\"d-flex flex-row nft-container flex-wrap\">\n            <Image className=\"mx-0 my-auto\" src={getPreviewLink(nftAddress)} />\n            <hr />\n            {nftState === null && (\n              <div className=\"px-3 py-3 details d-flex flex-column flex-fill\">\n                <Spinner className=\"mx-auto my-auto\" animation=\"border\"/>\n              </div>\n            )}\n            {nftState !== null && (\n              <div className=\"px-3 py-3 details d-flex flex-column flex-fill\">\n                <h2 className=\"accent\">{nftMeta.name}</h2>\n                <div className=\"description flex-wrap\">\n                  <i>{nftMeta.description}</i>\n                </div>\n                <div className=\"mt-2\">\n                  {nftItemCollection !== null && (\n                    <div className=\"text-truncate\">\n                      <span>\n                        <b>In</b>{\" \"}\n                        <a\n                          className=\"simple-link\"\n                          href={`/collection/${nftItemCollection.handle}`}\n                        >\n                          {nftItemCollection.name}\n                        </a>\n                      </span>\n                    </div>\n                  )}\n                  {profile !== undefined && profile !== null && (\n                    <div className=\"text-truncate\">\n                      <span>\n                        <b>By</b>{\" \"}\n                        <a\n                          className=\"simple-link\"\n                          href={`/profile/${profile.address}`}\n                        >\n                          {profile.name || profile.address}\n                        </a>\n                      </span>\n                    </div>\n                  )}\n                  {profile === null && (\n                    <div className=\"text-truncate\">\n                      <span>\n                        <b>By</b> -\n                      </span>\n                    </div>\n                  )}\n                  {nftOwner !== undefined && nftOwner !== null && (\n                    <div className=\"text-truncate\">\n                      <span>\n                        <b>Owner</b>{\" \"}\n                        <a\n                          className=\"simple-link\"\n                          href={`/profile/${nftOwner.address}`}\n                        >\n                          {nftOwner.name || nftOwner.address}\n                        </a>\n                      </span>\n                    </div>\n                  )}\n                  {nftOwner === undefined && (\n                    <div className=\"text-truncate\">\n                      <span>\n                        <b>Owner</b> -\n                      </span>\n                    </div>\n                  )}\n                  <div className=\"text-truncate\">\n                    <span>\n                      <b>Original content</b>\n                    </span>\n                    &nbsp;\n                    {downloadLink === null && (\n                      <span className=\"me-auto clickable\" onClick={doDownload}>\n                        Verify ownership\n                      </span>\n                    )}\n                    {downloadLink !== null && (\n                      <a\n                        className=\"simple-link me-auto\"\n                        href={downloadLink}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        Link\n                      </a>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex-fill d-flex flex-column\">\n                  <div className=\"mx-auto my-auto py-4 text-center\">\n                    <span className=\"card-price\">\n                      {satoshiToLocaleString(nftState.stats.price)}\n                    </span>\n                    <br />\n                    <span className=\"card-price-subtitle\">DINGO</span>\n                  </div>\n                </div>\n                {nftState !== null && (\n                  <div className=\"mt-1\">\n                    <span className=\"text-muted\">\n                      <FontAwesomeIcon icon={faCashRegister} /> Trade volume{\" \"}\n                    </span>\n                    <span>\n                      {satoshiToLocaleString(nftState.stats.tradeVolume)}\n                    </span>\n                    <br />\n                    <span className=\"text-muted\">\n                      <FontAwesomeIcon icon={faExchangeAlt} /> Trade count{\" \"}\n                    </span>\n                    <span>{nftState.stats.tradeCount}</span>\n                    <br />\n                    <span className=\"text-muted\">Last trade height </span>\n                    <span>\n                      {nftState.stats.tradeHeight === null\n                        ? \"-\"\n                        : toLocaleString(nftState.stats.tradeHeight)}\n                    </span>\n                    <br />\n                    <span className=\"text-muted\">List height </span>\n                    <span>{toLocaleString(nftState.stats.listHeight)}</span>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {view === \"nft\" && nftMeta !== null && nftItemCollection !== undefined && (\n        <div className=\"profile-section py-3\">\n          <div className=\"d-flex flex-row content-header\">\n            <span className=\"me-auto content-title accent\">Buy this NFT</span>\n          </div>\n          <div>\n            {nftBusy !== undefined && nftBusy !== null && (\n              <div className=\"mt-4 text-center\">\n                {\" \"}\n                <h5>NFT busy</h5>\n                <p>\n                  <a\n                    className=\"simple-link\"\n                    href={\n                      \"https://openchains.info/coin/dingocoin/tx/\" +\n                      nftBusy.txid\n                    }\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    A transaction\n                  </a>{\" \"}\n                  is currenly being confirmed for this NFT. <br />\n                  Please try again in a few minutes.\n                </p>\n              </div>\n            )}\n            {nftBusy !== undefined && nftBusy === null && buyResult === null && (\n              <div className=\"d-flex flex-column\">\n                <div className=\"mt-4 text-center px-4\">\n                  <Form.Group>\n                    <Form.Label>\n                      <b>Resell at (*required)</b>\n                    </Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      value={resellPrice}\n                      onChange={(e) => {\n                        if (e.target.value.match(/^[0-9]*$/)) {\n                          setResellPrice(e.target.value);\n                        }\n                      }}\n                      style={{ textAlign: \"center\" }}\n                      isInvalid={resellPriceError !== \"\"}\n                    />\n                    {resellPriceError && (\n                      <div>\n                        <Form.Text className=\"input-error\">\n                          {resellPriceError}\n                        </Form.Text>\n                      </div>\n                    )}\n                    <Form.Text className=\"text-muted\">\n                      New price you want to sell this NFT for (min. 1\n                      Dingocoin).\n                    </Form.Text>\n                  </Form.Group>\n                </div>\n                <div className=\"d-flex flex-row\">\n                  <Button\n                    className=\"popup-button mt-4 mx-auto px-4\"\n                    style={{ width: \"auto\" }}\n                    disabled={resellPriceError !== \"\"}\n                    onClick={doBuy}\n                  >\n                    Buy and resell NFT\n                  </Button>\n                </div>\n              </div>\n            )}\n            {buyResult !== null && buyResult.error === undefined && (\n              <div className=\"mt-4 text-center\">\n                {\" \"}\n                <h4>Transaction submitted!</h4>\n                <p>\n                  Transaction ID:{\" \"}\n                  <a\n                    className=\"simple-link\"\n                    href={\n                      \"https://openchains.info/coin/dingocoin/tx/\" +\n                      buyResult.txid\n                    }\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    {buyResult.txid}\n                  </a>\n                  <br />\n                  It may take a few minutes for your transaction to be\n                  confirmed.\n                </p>\n              </div>\n            )}\n            {buyResult !== null && buyResult.error !== undefined && (\n              <div style={{ textAlign: \"center\" }} className=\"mt-4\">\n                {\" \"}\n                <h4>Transaction failed!</h4>\n                <p>\n                  - Make sure that your wallet has no pending transaction.\n                  <br />- You can't buy this NFT as its owner/creator.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {view === \"nft\" && nftMeta !== null && nftItemCollection !== undefined && (\n        <div className=\"profile-section py-3\">\n          <div className=\"d-flex flex-row content-header\">\n            <span className=\"me-auto content-title accent\">\n              Reprice this NFT\n            </span>\n          </div>\n          <div>\n            {nftBusy !== undefined && nftBusy !== null && (\n              <div className=\"mt-4 text-center\">\n                {\" \"}\n                <h5>NFT busy</h5>\n                <p>\n                  <a\n                    className=\"simple-link\"\n                    href={\n                      \"https://openchains.info/coin/dingocoin/tx/\" +\n                      nftBusy.txid\n                    }\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    A transaction\n                  </a>{\" \"}\n                  is currenly being confirmed for this NFT. <br />\n                  Please try again in a few minutes.\n                </p>\n              </div>\n            )}\n            {nftBusy !== undefined &&\n              nftBusy === null &&\n              repriceResult === null && (\n                <div className=\"d-flex flex-column\">\n                  <div className=\"mt-4 text-center px-4\">\n                    <Form.Group>\n                      <Form.Label>\n                        <b>Reprice at (*required)</b>\n                      </Form.Label>\n                      <Form.Control\n                        type=\"text\"\n                        value={repricePrice}\n                        onChange={(e) => {\n                          if (e.target.value.match(/^[0-9]*$/)) {\n                            setRepricePrice(e.target.value);\n                          }\n                        }}\n                        style={{ textAlign: \"center\" }}\n                        isInvalid={repricePriceError !== \"\"}\n                      />\n                      {repricePriceError && (\n                        <div>\n                          <Form.Text className=\"input-error\">\n                            {repricePriceError}\n                          </Form.Text>\n                        </div>\n                      )}\n                      <Form.Text className=\"text-muted\">\n                        New sell price for this NFT (min. 1 Dingocoin).\n                      </Form.Text>\n                    </Form.Group>\n                  </div>\n                  <div className=\"d-flex flex-row\">\n                    <Button\n                      className=\"popup-button mt-4 mx-auto px-4\"\n                      style={{ width: \"auto\" }}\n                      disabled={repricePriceError !== \"\"}\n                      onClick={doReprice}\n                    >\n                      Reprice NFT\n                    </Button>\n                  </div>\n                </div>\n              )}\n            {repriceResult !== null && repriceResult.error === undefined && (\n              <div className=\"mt-4 text-center\">\n                {\" \"}\n                <h4>Transaction submitted!</h4>\n                <p>\n                  Transaction ID:{\" \"}\n                  <a\n                    className=\"simple-link\"\n                    href={\n                      \"https://openchains.info/coin/dingocoin/tx/\" +\n                      repriceResult.txid\n                    }\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    {repriceResult.txid}\n                  </a>\n                  <br />\n                  It may take a few minutes for your transaction to be\n                  confirmed.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      <GetWalletModal\n        show={getWalletShow}\n        onHide={() => setGetWalletShow(false)}\n      />\n\n      {(view === \"profile\" || view === \"profileOwned\") && (\n        <EditProfileModal\n          title=\"Edit profile\"\n          show={editProfileShow}\n          onHide={() => setEditProfileShow(false)}\n          address={profileAddress}\n          onSubmit={doEditProfileSubmit}\n        />\n      )}\n\n      {view === \"profile\" && (\n        <CreateCollectionModal\n          title=\"Create new collection\"\n          show={createCollectionShow}\n          owner={profileAddress}\n          onHide={() => setCreateCollectionShow(false)}\n          onSubmit={doCreateCollectionSubmit}\n        />\n      )}\n\n      {view === \"collection\" && collection !== null && (\n        <EditCollectionModal\n          title=\"Edit collection\"\n          show={editCollectionShow}\n          handle={collection.handle}\n          onHide={() => setEditCollectionShow(false)}\n          onSubmit={doEditCollectionSubmit}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default ProfileController;\n","import {\n  Tab,\n  Nav,\n  Button,\n  InputGroup,\n  FormControl,\n  Form,\n  Spinner,\n} from \"react-bootstrap\";\nimport React from \"react\";\nimport {\n  queryNftBySearch,\n  queryCollectionBySearch,\n  queryProfileBySearch,\n} from \"./api\";\nimport { useLocation } from \"react-router-dom\";\nimport CollectionCard from \"./CollectionCard\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBolt,\n  faList,\n  faSearch,\n  faArrowRight,\n  faUserCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport NFTCard from \"./NFTCard\";\nimport ProfileCard from \"./ProfileCard\";\n\nfunction SearchController() {\n  const location = useLocation();\n\n  // For search view.\n  const [search, setSearch] = React.useState(\"\");\n  const [searchSubView, setSearchSubView] = React.useState(null);\n  const [searchNfts, setSearchNfts] = React.useState(null);\n  const [searchCollections, setSearchCollections] = React.useState(null);\n  const [searchProfiles, setSearchProfiles] = React.useState(null);\n\n  React.useEffect(() => {\n    (async () => {\n      setSearch(new URLSearchParams(location.search).get(\"query\"));\n      await doChangeSearchSubview(\"nfts\");\n    })();\n  }, []);\n\n  const doSearch = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n\n    if (search.trim() !== \"\") {\n      window.location.assign(`/search?query=${search.trim()}`);\n    }\n  };\n\n  const doChangeSearchSubview = async (subview) => {\n    // TODO: Figure out a more elegant way to retrieve this from the existing react state.\n    const search = new URLSearchParams(location.search).get(\"query\");\n\n    setSearchSubView(subview);\n\n    if (subview === \"nfts\" && searchNfts === null) {\n      setSearchNfts((await queryNftBySearch({ search: search })).results);\n    }\n    if (subview === \"collections\" && searchCollections === null) {\n      setSearchCollections(\n        (await queryCollectionBySearch({ search: search })).results\n      );\n    }\n    if (subview === \"profiles\" && searchProfiles === null) {\n      setSearchProfiles(\n        (await queryProfileBySearch({ search: search })).results\n      );\n    }\n  };\n\n  return (\n    <div className=\"d-flex flex-column\">\n      <div\n        className=\"mx-auto mt-4 accent text-center d-flex flex-column\"\n        style={{ maxWidth: \"584px\", width: \"100%\" }}\n      >\n        <h1>Search 🔍</h1>\n        <Form onSubmit={doSearch}>\n          <InputGroup className=\"mt-4\">\n            <InputGroup.Text id=\"basic-addon1\">\n              <FontAwesomeIcon icon={faSearch} />\n            </InputGroup.Text>\n            {search !== null && (\n              <FormControl\n                className=\"search-box\"\n                placeholder={\"Search NFTs, collections, profiles...\"}\n                value={search}\n                onChange={(e) => {\n                  if (e.target.value.length <= 50) {\n                    setSearch(e.target.value);\n                  }\n                }}\n              />\n            )}\n            {search !== \"\" && (\n              <Button variant=\"primary\" type=\"submit\">\n                <FontAwesomeIcon icon={faArrowRight} />\n              </Button>\n            )}\n          </InputGroup>\n        </Form>\n      </div>\n      <Tab.Container\n        id=\"left-tabs-example\"\n        activeKey={searchSubView}\n        onSelect={doChangeSearchSubview}\n      >\n        <div>\n          <Nav variant=\"tabs\" className=\"custom-nav-tabs mt-4 constant-width\">\n            <Nav.Item className=\"ms-auto text-center\">\n              <Nav.Link eventKey=\"nfts\">\n                <FontAwesomeIcon icon={faList} className=\"me-2\" />\n                NFTs\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item className=\"text-center\">\n              <Nav.Link eventKey=\"collections\">\n                <FontAwesomeIcon icon={faBolt} className=\"me-2\" />\n                Collections\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item className=\"me-auto text-center\">\n              <Nav.Link eventKey=\"profiles\">\n                <FontAwesomeIcon icon={faUserCircle} className=\"me-2\" />\n                Profiles\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n          <hr className=\"light-border\" />\n        </div>\n        <div>\n          <Tab.Content>\n            <Tab.Pane eventKey=\"nfts\">\n              <ul className=\"cards-container mt-4\">\n                {searchNfts === null && (\n                  <div className=\"d-flex flex-row\">\n                    <Spinner className=\"mx-auto\" animation=\"border\" />\n                  </div>\n                )}\n                {searchNfts !== null &&\n                  searchNfts.map((x) => (\n                    <a key={x.address} href={`/nft/${x}`}>\n                      <NFTCard address={x} />\n                    </a>\n                  ))}\n                {searchNfts !== null && searchNfts.length === 0 && (\n                  <div className=\"d-flex flex-row\">\n                    <p className=\"mx-auto text-muted\" animation=\"border\">\n                      No matching NFTs\n                    </p>\n                  </div>\n                )}\n              </ul>\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"collections\">\n              <ul className=\"collection-cards-container mt-4\">\n                {searchCollections === null && (\n                  <div className=\"d-flex flex-row\">\n                    <Spinner className=\"mx-auto\" animation=\"border\" />\n                  </div>\n                )}\n                {searchCollections !== null &&\n                  searchCollections.map((x) => (\n                    <a key={x} href={`/collection/${x}`}>\n                      <CollectionCard handle={x} />\n                    </a>\n                  ))}\n                {searchCollections !== null && searchCollections.length === 0 && (\n                  <div className=\"d-flex flex-row\">\n                    <p className=\"mx-auto text-muted\" animation=\"border\">\n                      No matching collection\n                    </p>\n                  </div>\n                )}\n              </ul>\n            </Tab.Pane>\n            <Tab.Pane eventKey=\"profiles\">\n              <ul className=\"profile-cards-container mt-4\">\n                {searchProfiles === null && (\n                  <div className=\"d-flex flex-row\">\n                    <Spinner className=\"mx-auto\" animation=\"border\" />\n                  </div>\n                )}\n                {searchProfiles !== null &&\n                  searchProfiles.map((x) => (\n                    <a key={x} href={`/profile/${x}`}>\n                      <ProfileCard address={x} />\n                    </a>\n                  ))}\n                {searchProfiles !== null && searchProfiles.length === 0 && (\n                  <div className=\"d-flex flex-row\">\n                    <p className=\"mx-auto text-muted\" animation=\"border\">\n                      No matching profile\n                    </p>\n                  </div>\n                )}\n              </ul>\n            </Tab.Pane>\n          </Tab.Content>\n        </div>\n      </Tab.Container>\n    </div>\n  );\n}\n\nexport default SearchController;\n","export default __webpack_public_path__ + \"static/media/dingocoin.15331900.png\";","import \"./App.scss\";\nimport CreateController from \"./CreateController\";\nimport ProfileController from \"./ProfileController\";\nimport ExploreCollectionsController from \"./ExploreCollectionsController\";\nimport ExploreNftsController from \"./ExploreNftsController\";\nimport ExploreProfilesController from \"./ExploreProfilesController\";\nimport SearchController from \"./SearchController\";\nimport {\n  Navbar,\n  Nav,\n  NavDropdown,\n  NavItem,\n  NavLink,\n  Dropdown,\n  Container,\n  Form,\n  FormControl,\n  Button,\n  Modal,\n  InputGroup,\n} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faAngleRight,\n  faList,\n  faUserCircle,\n  faThLarge,\n  faShoppingBag,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport DingocoinLogo from \"./assets/img/dingocoin.png\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n} from \"react-router-dom\";\nimport Main from \"./Main\";\n\nfunction App() {\n  const [location, setLocation] = React.useState(null);\n  React.useEffect(() => {\n    setLocation(window.location.pathname);\n  }, []);\n  React.useEffect(() => {}, [location]);\n\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [searchErrorShow, setSearchErrorShow] = React.useState(null);\n\n  const doSearch = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n\n    if (searchQuery.trim() !== \"\") {\n      window.location.assign(`/search?query=${searchQuery.trim()}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar className=\"navbar px-4 py-2\" bg=\"dark\" expand=\"lg\" sticky=\"top\">\n        <Navbar.Brand href=\"/\" className=\"navbar-brand align-items-center\">\n          <img alt=\"\" src={DingocoinLogo} />\n          <span className=\"d-none d-lg-block d-xl-block\">DINGOCOIN</span>\n          <span className=\"navbar-brand-subtitle\"> NFT Platform</span>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse>\n          <Nav className=\"ms-auto text-center\">\n            <Form className=\"d-flex\" onSubmit={doSearch}>\n              <InputGroup\n                style={{\n                  minWidth: \"20rem\",\n                }}\n              >\n                <FormControl\n                  className=\"search-box my-1\"\n                  placeholder={\"Search NFTs, collections, profiles...\"}\n                  value={searchQuery}\n                  onChange={(e) => {\n                    if (e.target.value.length <= 50) {\n                      setSearchQuery(e.target.value);\n                    }\n                  }}\n                />\n                {searchQuery !== \"\" && (\n                  <Button variant=\"secondary\" type=\"submit\">\n                    <FontAwesomeIcon icon={faAngleRight}></FontAwesomeIcon>\n                  </Button>\n                )}\n              </InputGroup>\n            </Form>\n            <Nav.Link href=\"/\">\n              <span className=\"align-middle\">\n                <nobr>Home</nobr>\n              </span>\n            </Nav.Link>\n            <Dropdown as={NavItem} className=\"navbar-important\">\n              <Dropdown.Toggle as={NavLink}>\n                <span className=\"align-middle\">Explore</span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item href=\"/collections\">\n                  <FontAwesomeIcon className=\"me-2 accent\" icon={faThLarge} />\n                  Collections\n                </Dropdown.Item>\n                <Dropdown.Item href=\"/nfts\">\n                  <FontAwesomeIcon className=\"me-2 accent\" icon={faList} />\n                  NFTs\n                </Dropdown.Item>\n                <Dropdown.Item href=\"/profiles\">\n                  <FontAwesomeIcon\n                    className=\"me-2 accent\"\n                    icon={faUserCircle}\n                  />\n                  Profiles\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            <Nav.Link href=\"/create\">\n              <span className=\"align-middle\">\n                <nobr>Create</nobr>\n              </span>\n            </Nav.Link>\n            <Nav.Link href=\"https://dingocoin.org\" target=\"_blank\">\n              <span className=\"align-middle\">\n                <nobr>Visit Dingocoin</nobr>\n              </span>\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      <section className=\"section-content\">\n        {/*\n        <Router>\n          <Routes>\n            <Route index element={<Main />} />\n            <Route path=\"/profile\">\n              <Route path=\":profileAddress\" element={<ProfileController />}>\n                <Route path=\"owned\" element={<ProfileController />} />\n                <Route path=\"stats\" element={<ProfileController />} />\n              </Route>\n            </Route>\n            <Route\n              path=\"/collection/:collectionHandle\"\n              element={<ProfileController />}\n            />\n            <Route path=\"/nft/:nftAddress\" element={<ProfileController />} />\n            <Route\n              path=\"/collections\"\n              element={<ExploreCollectionsController />}\n            >\n              <Route path=\"hot\" element={<ExploreCollectionsController />} />\n              <Route path=\"top\" element={<ExploreCollectionsController />} />\n              <Route path=\"search\" element={<ExploreCollectionsController />} />\n            </Route>\n            <Route path=\"/nfts\" element={<ExploreNftsController />}>\n              <Route path=\"search\" element={<ExploreNftsController />} />\n            </Route>\n            <Route path=\"/profiles\" element={<ExploreProfilesController />}>\n              <Route path=\"earnings\" element={<ExploreProfilesController />} />\n              <Route path=\"search\" element={<ExploreProfilesController />} />\n            </Route>\n            <Route path=\"/search\" element={<SearchController />} />\n            <Route path=\"/create\" element={<CreateController />} />\n            <Route element={<Navigate to=\"/\" />} />\n          </Routes>\n        </Router>\n        */}\n        <p>The NFT platform is currently down for maintenance. We apologize for any inconvenience caused.</p>\n      </section>\n      <section>\n        <div className=\"justify-content-center section-footer align-items-center\">\n          <h6>Copyright © The Dingocoin Project 2021-2022</h6>\n        </div>\n      </section>\n\n      <Modal\n        size=\"md\"\n        centered\n        show={searchErrorShow}\n        onHide={() => setSearchErrorShow(false)}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>NFT/profile not found</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container className=\"text-center my-2\">\n            <p>No results found.</p>\n            <Button className=\"mx-2\" onClick={() => setSearchErrorShow(false)}>\n              Close\n            </Button>\n          </Container>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n","// Assets.\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction CustomDivider() {\n  return (\n    <div className=\"divider-custom\">\n      <div className=\"divider-custom-line mt-2 mb-2\"></div>\n      <div className=\"divider-custom-icon mt-2 mb-2\">\n        <FontAwesomeIcon icon={faAngleDown} />\n      </div>\n      <div className=\"divider-custom-line mt-2 mb-2\"></div>\n    </div>\n  );\n}\n\nexport default CustomDivider;\n","import { Modal, Container, Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nfunction GetWalletModal(props) {\n  return (\n    <Modal\n      size=\"md\"\n      centered\n      show={props.show}\n      onHide={props.onHide}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>\n          Browser Wallet required\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Container className=\"text-center my-2\">\n          <p>You need a Dingocoin browser wallet for this.<br/>Set it up in less than a minute.</p>\n          <a className=\"my-1\" href=\"https://dingocoin.org/wallets\" target=\"_blank\" rel=\"noreferrer\">\n            <Button className=\"mx-2\">Get Chrome wallet</Button>\n          </a>\n          <a className=\"my-1\" href=\"https://dingocoin.org/wallets\" target=\"_blank\" rel=\"noreferrer\">\n            <Button className=\"mx-2\">Get Firefox wallet</Button>\n          </a>\n        </Container>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default GetWalletModal;\n"],"sourceRoot":""}