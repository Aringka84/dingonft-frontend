{"version":3,"sources":["CustomDivider.jsx","utils.js","api.js","storage.js","ExploreController.jsx","assets/img/dingocoin.png","App.jsx","index.jsx","GetWalletModal.jsx"],"names":["CustomDivider","className","icon","faAngleDown","toSatoshi","x","undefined","Error","BigInt","Web3Utils","toWei","toString","satoshiToLocaleString","isNegative","integer","replace","post","link","data","a","controller","AbortController","setTimeout","abort","fetch","withCredentials","method","signal","headers","Accept","body","JSON","stringify","json","API_URL","getBusy","address","result","busy","getBuyTransaction","price","sendBuyTransaction","transaction","getListTransaction","contentHash","royalty","sendListTransaction","content","preview","name","description","tags","updateProfile","timestamp","owner","signature","queryNft","key","direction","offset","limit","queryNftByNewest","beforeId","getCollection","handle","queryCollectionByOwner","queryUnassignedNftsByOwner","updateCollection","thumbnail","setCollectionItem","getCollectionItems","getItemCollection","queryCollectionByTradeCountScaled","queryCollectionByTradeVolume","get","getMeta","response","status","ExploreController","App","React","useState","location","setLocation","useEffect","window","pathname","searchQuery","setSearchQuery","searchErrorShow","setSearchErrorShow","doSearch","e","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","trim","assign","Navbar","bg","expand","sticky","Container","Brand","href","alt","src","DingocoinLogo","Toggle","Collapse","Nav","style","paddingRight","textAlign","Link","Form","onSubmit","FormControl","type","placeholder","borderTopRightRadius","borderBottomRightRadius","minWidth","value","onChange","target","Button","variant","borderTopLeftRadius","borderBottomLeftRadius","faAngleRight","Modal","size","centered","show","onHide","Header","closeButton","Title","Body","onClick","ReactDOM","render","document","getElementById","GetWalletModal","props","rel"],"mappings":"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","file":"static/js/main.16475a43.chunk.js","sourcesContent":["// Assets.\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction CustomDivider() {\n  return (\n    <div className=\"divider-custom\">\n      <div className=\"divider-custom-line mt-2 mb-2\"></div>\n      <div className=\"divider-custom-icon mt-2 mb-2\">\n        <FontAwesomeIcon icon={faAngleDown} />\n      </div>\n      <div className=\"divider-custom-line mt-2 mb-2\"></div>\n    </div>\n  );\n}\n\nexport default CustomDivider;\n","/* global BigInt */\n\nimport Web3Utils from \"web3-utils\";\n\nconst toSatoshi = (x) => {\n  if (x === null || x === undefined || typeof x !== \"string\" || x === \"\") {\n    throw new Error(\"Expected string input\");\n  }\n  return (BigInt(Web3Utils.toWei(x, \"gwei\")) / 10n).toString();\n};\n\nconst satoshiToLocaleString = (x) => {\n  const isNegative = BigInt(x) < 0n;\n  if (isNegative) {\n    x = -x;\n  }\n  const integer = (BigInt(x) / 100000000n).toString();\n  return (\n    (isNegative ? \"-\" : \"\") + `${integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`\n  );\n};\n\nconst post = async (link, data) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 30000);\n  return (\n    await fetch(link, {\n      withCredentials: true,\n      method: \"POST\",\n      signal: controller.signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n  ).json();\n};\n\nconst get = (link) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 30000);\n  return fetch(link, {\n    withCredentials: true,\n    method: \"GET\",\n    signal: controller.signal,\n  });\n};\n\nexport { toSatoshi, satoshiToLocaleString, post, get };\n","import { post } from \"./utils\";\n\nconst API_URL = \"https://nftp0.dingocoin.io\";\n//const API_URL = \"http://localhost:33332\";\n\nconst getBusy = async (data) => {\n  const result = await post(`${API_URL}/nft/getBusy`, {\n    address: data.address,\n  });\n  if (result === null) {\n    return null;\n  } else {\n    return result.busy;\n  }\n};\n\nconst getContent = (data) => {\n  return post(`${API_URL}/nft/getContent`, {\n    address: data.address,\n    timestamp: data.timestamp,\n    signature: data.signature,\n  });\n};\n\nconst getBuyTransaction = (data) => {\n  return post(`${API_URL}/nft/getBuyTransaction`, {\n    address: data.address,\n    price: data.price,\n  });\n};\n\nconst sendBuyTransaction = (data) => {\n  return post(`${API_URL}/nft/sendBuyTransaction`, {\n    transaction: data.transaction,\n  });\n};\n\nconst getListTransaction = (data) => {\n  return post(`${API_URL}/nft/getListTransaction`, {\n    contentHash: data.contentHash,\n    price: data.price,\n    royalty: data.royalty,\n  });\n};\n\nconst sendListTransaction = (data) => {\n  return post(`${API_URL}/nft/sendListTransaction`, {\n    content: data.content,\n    preview: data.preview,\n    name: data.name,\n    description: data.description,\n    tags: data.tags,\n    transaction: data.transaction,\n  });\n};\n\nconst updateProfile = (data) => {\n  return post(`${API_URL}/profile/update`, {\n    timestamp: data.timestamp,\n    owner: data.owner,\n    name: data.name,\n    signature: data.signature,\n  });\n};\n\nconst queryNft = (data) => {\n  return post(`${API_URL}/nft/query`, {\n    key: data.key,\n    direction: data.direction,\n    offset: data.offset,\n    limit: data.limit,\n  });\n};\n\nconst queryNftByNewest = (data) => {\n  return post(`${API_URL}/nft/queryByNewest`, {\n    beforeId: data.beforeId\n  });\n};\n\nconst getCollection = (data) => {\n  return post(`${API_URL}/collection/get`, {\n    handle: data.handle,\n  });\n};\n\nconst queryCollectionByOwner = (data) => {\n  return post(`${API_URL}/collection/queryByOwner`, {\n    owner: data.owner,\n  });\n};\n\nconst queryUnassignedNftsByOwner = (data) => {\n  return post(`${API_URL}/collection/queryUnassignedNftsByOwner`, {\n    owner: data.owner,\n  });\n};\n\nconst updateCollection = (data) => {\n  return post(`${API_URL}/collection/update`, {\n    timestamp: data.timestamp,\n    owner: data.owner,\n    handle: data.handle,\n    name: data.name,\n    thumbnail: data.thumbnail,\n    description: data.description,\n    signature: data.signature,\n  });\n};\n\nconst setCollectionItem = (data) => {\n  return post(`${API_URL}/collection/setItem`, {\n    timestamp: data.timestamp,\n    address: data.address,\n    handle: data.handle,\n    signature: data.signature,\n  });\n};\n\nconst getCollectionItems = (data) => {\n  return post(`${API_URL}/collection/getItems`, {\n    handle: data.handle,\n  });\n};\n\nconst getItemCollection = (data) => {\n  return post(`${API_URL}/collection/getItemCollection`, {\n    address: data.address,\n  });\n};\n\nconst queryCollectionByTradeCountScaled = () => {\n  return post(`${API_URL}/collection/queryByTradeCountScaled`, {});\n};\n\nconst queryCollectionByTradeVolumeScaled = () => {\n  return post(`${API_URL}/collection/queryByTradeVolumeScaled`, {});\n};\n\nconst queryCollectionByTradeVolume = () => {\n  return post(`${API_URL}/collection/queryByTradeVolume`, {});\n};\n\nexport {\n  getBusy,\n  getContent,\n  getBuyTransaction,\n  sendBuyTransaction,\n  getListTransaction,\n  sendListTransaction,\n  updateProfile,\n  queryNft,\n  queryNftByNewest,\n  getCollection,\n  queryCollectionByOwner,\n  queryUnassignedNftsByOwner,\n  updateCollection,\n  setCollectionItem,\n  getCollectionItems,\n  getItemCollection,\n  queryCollectionByTradeCountScaled,\n  queryCollectionByTradeVolumeScaled,\n  queryCollectionByTradeVolume\n};\n","const META_BUCKET = \"https://ewr1.vultrobjects.com/dingo-nftc-0-meta\";\nconst PREVIEW_BUCKET = \"https://ewr1.vultrobjects.com/dingo-nftc-0-preview\";\nconst STATE_BUCKET = \"https://ewr1.vultrobjects.com/dingo-nftc-0-state\";\nconst PROFILE_BUCKET = \"https://ewr1.vultrobjects.com/dingo-nftc-0-profile\";\nconst PROFILE_LISTS_BUCKET = \"https://ewr1.vultrobjects.com/dingo-nftc-0-profilelists\";\nconst EXPLORE_BUCKET = \"https://ewr1.vultrobjects.com/dingo-nftc-0-explore\";\n\nconst get = (link) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 5000);\n  return fetch(link, {\n    withCredentials: true,\n    method: \"GET\",\n    signal: controller.signal,\n  });\n};\n\nconst getMeta = async (address) => {\n  const response = await get(`${META_BUCKET}/${address}`);\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    return null;\n  }\n};\n\nconst getPreviewLink = (address) => {\n  return `${PREVIEW_BUCKET}/${address}.png`;\n};\n\nconst getState = async (address) => {\n  const response = await get(`${STATE_BUCKET}/${address}`);\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    return null;\n  }\n};\n\nconst getProfile = async (owner) => {\n  const response = await get(`${PROFILE_BUCKET}/${owner}`);\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    return null;\n  }\n};\n\nconst getProfileLists = async (owner) => {\n  const response = await get(`${PROFILE_LISTS_BUCKET}/${owner}`);\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    return null;\n  }\n};\n\nconst getExplore = async (key) => {\n  const response = await get(`${EXPLORE_BUCKET}/${key}`);\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    return null;\n  }\n};\n\nexport { getMeta, getPreviewLink, getState, getProfile, getProfileLists, getExplore };\n","import { Row, Tab, Col, Nav, Button, Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\nimport {\n  queryCollectionByTradeCountScaled,\n  queryCollectionByTradeVolume,\n  queryNftByNewest,\n  queryNft,\n} from \"./api\";\nimport { useLocation } from \"react-router-dom\";\nimport CollectionCard from \"./CollectionCard\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBolt, faFire, faList } from \"@fortawesome/free-solid-svg-icons\";\nimport NFTCard from \"./NFTCard\";\n\nfunction ExploreController() {\n  const location = useLocation();\n  let view = location.pathname.split(\"/\").pop();\n  view = [\"top\", \"all\"].includes(view) ? view : \"trending\";\n\n  const [collectionList, setCollectionList] = React.useState(null);\n  const [nftList, setNftList] = React.useState(null);\n  const [nftListEnd, setNftListEnd] = React.useState(false);\n  const [queryText, setQueryText] = React.useState(\"Newly listed\");\n\n  const [viewMoreEnabled, setViewMoreEnabled] = React.useState(true);\n\n  React.useEffect(() => {\n    document.title = `Explore`;\n    (async () => {\n      if (view === \"trending\") {\n        const l = await queryCollectionByTradeCountScaled();\n        setCollectionList(l.results);\n      } else if (view === \"top\") {\n        const l = await queryCollectionByTradeVolume();\n        setCollectionList(l.results);\n      } else if (view === \"all\") {\n        const l = (await queryNftByNewest({ beforeId: null })).results;\n        if (l.length < 100) {\n          setNftListEnd(true);\n        }\n        setNftList(l);\n      }\n    })();\n  }, []);\n\n  const doChangeQuery = async (eventKey, event) => {\n    const [key, direction] = eventKey.split(\"|\");\n    setQueryText(event.target.innerText);\n\n    setNftListEnd(false);\n    if (key === \"listHeight\") {\n      const l = (await queryNftByNewest({ beforeId: null })).results;\n      if (l.length < 100) {\n        setNftListEnd(true);\n      }\n      setNftList(l);\n      setViewMoreEnabled(true);\n    } else {\n      const l = await queryNft({\n        key: key,\n        direction: direction,\n        limit: 100,\n        offset: 0,\n      });\n      setNftList(\n        l.results.map((x) => {\n          return {\n            address: x,\n          };\n        })\n      );\n      setViewMoreEnabled(false);\n    }\n  };\n\n  const onViewMore = async () => {\n    const l = (\n      await queryNftByNewest({ beforeId: nftList[nftList.length - 1].id })\n    ).results;\n    if (l.length < 100) {\n      setNftListEnd(true);\n    }\n    setNftList(nftList.concat(l));\n  };\n\n  return (\n    <div className=\"d-flex flex-column\">\n      <div className=\"mx-auto mt-4 accent\">\n        <h1>Explore</h1>\n      </div>\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n        <Row>\n          <Nav variant=\"tabs\" className=\"custom-nav-tabs mt-4\">\n            <Nav.Item className=\"ms-auto\">\n              <Nav.Link href=\"/explore/\" active={view === \"trending\"}>\n                <FontAwesomeIcon icon={faBolt} className=\"me-2\" />\n                Trending\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"/explore/top\" active={view === \"top\"}>\n                <FontAwesomeIcon icon={faFire} className=\"me-2\" />\n                Top\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item className=\"me-auto\">\n              <Nav.Link href=\"/explore/all\" active={view === \"all\"}>\n                <FontAwesomeIcon icon={faList} className=\"me-2\" />\n                All NFTs\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n          <hr className=\"light-border\" />\n        </Row>\n        <Row>\n          {[\"trending\", \"top\"].includes(view) && collectionList !== null && (\n            <Tab.Content>\n              <ul className=\"collection-cards-container mt-4\">\n                {collectionList !== null &&\n                  collectionList.map((x) => (\n                    <a key={x} href={`/collection/${x}`}>\n                      <CollectionCard handle={x} />\n                    </a>\n                  ))}\n              </ul>\n            </Tab.Content>\n          )}\n          {view === \"all\" && (\n            <Tab.Content>\n              <Dropdown\n                onSelect={doChangeQuery}\n                style={{ textAlign: \"center\" }}\n              >\n                <Dropdown.Toggle className=\"px-4 mt-4\">\n                  {queryText}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  <Dropdown.Item eventKey=\"listHeight|DESC\">\n                    Newly listed\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"tradeHeight|DESC\">\n                    Recently sold\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"price|DESC\">\n                    Highest price\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"price|ASC\">\n                    Lowest price\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"tradeCount|DESC\">\n                    Highest trade count\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"tradeCount|ASC\">\n                    Lowest trade count\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"tradeVolume|DESC\">\n                    Highest trade volume\n                  </Dropdown.Item>\n                  <Dropdown.Item eventKey=\"tradeVolume|ASC\">\n                    Lowest trade volume\n                  </Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n              <ul className=\"cards-container mt-4\">\n                {nftList !== null &&\n                  nftList.map((x) => (\n                    <a key={x.address} href={`/nft/${x.address}`}>\n                      <NFTCard address={x.address} />\n                    </a>\n                  ))}\n                {viewMoreEnabled && nftList !== null && !nftListEnd && (\n                  <Button onClick={onViewMore}>View more</Button>\n                )}\n              </ul>\n            </Tab.Content>\n          )}\n        </Row>\n      </Tab.Container>\n    </div>\n  );\n}\n\nexport default ExploreController;\n","export default __webpack_public_path__ + \"static/media/dingocoin.15331900.png\";","import \"./App.scss\";\nimport CreateController from \"./CreateController\";\nimport ProfileController from \"./ProfileController\";\nimport ExploreController from \"./ExploreController\";\nimport {\n  Navbar,\n  Nav,\n  Container,\n  Form,\n  FormControl,\n  Button,\n  Modal,\n} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport DingocoinLogo from \"./assets/img/dingocoin.png\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\nimport { getMeta } from \"./storage\";\n\nfunction App() {\n  const [location, setLocation] = React.useState(null);\n  React.useEffect(() => {\n    setLocation(window.location.pathname);\n  }, []);\n  React.useEffect(() => {}, [location]);\n\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [searchErrorShow, setSearchErrorShow] = React.useState(null);\n\n  const doSearch = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n\n    setSearchQuery(searchQuery.trim());\n\n    if (searchQuery.trim() !== \"\") {\n      const nftMeta = await getMeta(searchQuery.trim());\n      if (nftMeta !== null) {\n        window.location.assign(`/nft/${searchQuery.trim()}`);\n      } else {\n        window.location.assign(`/profile/${searchQuery.trim()}`);\n      }\n    }\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar className=\"navbar\" bg=\"dark\" expand=\"lg\" sticky=\"top\">\n          <Container>\n            <Navbar.Brand href=\"/\" className=\"navbar-brand align-items-center\">\n              <img alt=\"\" src={DingocoinLogo} />\n              <span>DINGOCOIN</span>\n              <span className=\"navbar-brand-subtitle\"> NFT Platform</span>\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse>\n              <Nav\n                className=\"ms-auto\"\n                style={{ paddingRight: \"1.5rem\", textAlign: \"center\" }}\n              >\n                <Nav.Link href=\"/explore\">Explore</Nav.Link>\n                <Nav.Link href=\"/create\">Create</Nav.Link>\n              </Nav>\n              <Form className=\"d-flex\" onSubmit={doSearch}>\n                <FormControl\n                  type=\"search\"\n                  placeholder=\"Jump to NFT/profile address...\"\n                  aria-label=\"Search\"\n                  style={{\n                    borderTopRightRadius: \"0\",\n                    borderBottomRightRadius: \"0\",\n                    minWidth: \"20rem\",\n                  }}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n                <Button\n                  variant=\"secondary mx-0\"\n                  style={{\n                    borderTopLeftRadius: \"0\",\n                    borderBottomLeftRadius: \"0\",\n                  }}\n                  type=\"submit\"\n                >\n                  <FontAwesomeIcon icon={faAngleRight}></FontAwesomeIcon>\n                </Button>\n              </Form>\n            </Navbar.Collapse>\n          </Container>\n        </Navbar>\n\n        <section className=\"section-content\">\n          <p>NFT platform will be down from March 5 6.30PM UTC+0 to  11.30PM UTC+0 for some crucial backend maintenance.</p>\n          <p>We apologize for any inconvenience caused.</p>\n          {/*\n          <Routes>\n            <Route\n              path=\"/profile/:profileAddress\"\n              element={<ProfileController />}\n            />\n            <Route\n              path=\"/profile/:profileAddress/owned\"\n              element={<ProfileController />}\n            />\n            <Route\n              path=\"/collection/:collectionHandle\"\n              element={<ProfileController />}\n            />\n            <Route path=\"/nft/:nftAddress\" element={<ProfileController />} />\n            <Route\n              path=\"/nft/:nftAddress/owned\"\n              element={<ProfileController />}\n            />\n            <Route path=\"/explore\" element={<ExploreController />} />\n            <Route path=\"/explore/top\" element={<ExploreController />} />\n            <Route path=\"/explore/all\" element={<ExploreController />} />\n            <Route path=\"/create\" element={<CreateController />} />\n            <Route path=\"*\" element={<Navigate to=\"/explore\"/>}/>\n          </Routes>*/}\n        </section>\n        <section>\n          <div className=\"justify-content-center section-footer align-items-center\">\n            <h6>Copyright © The Dingocoin Project 2021-2022</h6>\n          </div>\n        </section>\n      </div>\n\n      <Modal\n        size=\"md\"\n        centered\n        show={searchErrorShow}\n        onHide={() => setSearchErrorShow(false)}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>NFT/profile not found</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Container className=\"text-center my-2\">\n            <p>No results found.</p>\n            <Button className=\"mx-2\" onClick={() => setSearchErrorShow(false)}>\n              Close\n            </Button>\n          </Container>\n        </Modal.Body>\n      </Modal>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n","import { Modal, Container, Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nfunction GetWalletModal(props) {\n  return (\n    <Modal\n      size=\"md\"\n      centered\n      show={props.show}\n      onHide={props.onHide}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>\n          Browser Wallet required\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Container className=\"text-center my-2\">\n          <p>You need a Dingocoin browser wallet for this.<br/>Set it up in less than a minute.</p>\n          <a href=\"https://dingocoin.org/wallets\" target=\"_blank\" rel=\"noreferrer\">\n            <Button className=\"mx-2\">Get Chrome wallet</Button>\n          </a>\n          <a href=\"https://dingocoin.org/wallets\" target=\"_blank\" rel=\"noreferrer\">\n            <Button className=\"mx-2\">Get Firefox wallet</Button>\n          </a>\n        </Container>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default GetWalletModal;\n"],"sourceRoot":""}