{"version":3,"sources":["NFTController.jsx","CreateController.jsx","assets/img/dingocoin.png","App.jsx","index.jsx","CustomDivider.jsx"],"names":["API_URL","toSatoshi","x","undefined","Error","BigInt","Web3Utils","toWei","toString","satoshiToLocaleString","isNegative","integer","replace","post","link","data","a","controller","AbortController","setTimeout","abort","fetch","withCredentials","method","signal","headers","Accept","body","JSON","stringify","json","NFTController","props","React","useState","assetMeta","setAssetMeta","assetListing","setAssetListing","assetSale","setAssetSale","assetBusy","setAssetBusy","assetContent","setAssetContent","assetContentType","setAssetContentType","listingPrice","setListingPrice","resellPrice","setResellPrice","royalty","setRoyalty","listResult","setListResult","buyResult","setBuyResult","useEffect","address","meta","asset","state","console","log","listTx","sellTx","busy","contentRaw","content","Buffer","from","detectFileType","fromBuffer","err","res","mime","ext","doList","e","preventDefault","stopPropagation","price","Math","floor","vouts","window","dingo","requestSignTransaction","signed","result","transaction","doBuy","vins","style","textAlign","className","maxHeight","fileType","filePath","name","fontSize","description","href","download","owner","txid","rel","target","color","maxWidth","Group","Label","Control","type","value","onChange","match","parseInt","Text","toFixed","Range","width","onClick","error","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","CreateController","setAsset","assetError","setAssetError","setName","setDescription","tags","setTags","tradeDeadline","setTradeDeadline","concealDeadline","setConcealDeadline","privatizeDeadline","setPrivatizeDeadline","showAdvanced","setShowAdvanced","success","setSuccess","setAddress","doSubmit","nativeEvent","stopImmediatePropagation","size","payload","details","response","Container","Row","CustomDivider","Col","Form","onSubmit","files","isInvalid","placeholder","disabled","Button","variant","App","location","setLocation","pathname","Navbar","bg","expand","sticky","Brand","alt","src","DingocoinLogo","Collapse","Nav","Link","Toggle","URLSearchParams","search","get","minHeight","ReactDOM","render","StrictMode","document","getElementById","icon","faAngleDown"],"mappings":"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","file":"static/js/main.b2fc8006.chunk.js","sourcesContent":["/* global BigInt */\n\nimport { Container, Row, Button, Form } from \"react-bootstrap\";\nimport React from \"react\";\nimport CustomDivider from \"./CustomDivider\";\nimport FileViewer from \"react-file-viewer\";\nimport detectFileType from \"detect-file-type\";\nimport Web3Utils from \"web3-utils\";\n\nconst API_URL = \"https://nftp0.dingocoin.org\";\n//const API_URL = \"http://localhost:33332\";\n\nconst toSatoshi = (x) => {\n  if (x === null || x === undefined || typeof x !== \"string\" || x === \"\") {\n    throw new Error(\"Expected string input\");\n  }\n  return (BigInt(Web3Utils.toWei(x, \"gwei\")) / 10n).toString();\n};\n\nconst satoshiToLocaleString = (x) => {\n  const isNegative = BigInt(x) < 0n;\n  if (isNegative) {\n    x = -x;\n  }\n  const integer = (BigInt(x) / 100000000n).toString();\n  return (\n    (isNegative ? \"-\" : \"\") + `${integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`\n  );\n};\n\nconst post = async (link, data) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 5000);\n  return (\n    await fetch(link, {\n      withCredentials: true,\n      method: \"POST\",\n      signal: controller.signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n  ).json();\n};\n\nfunction NFTController(props) {\n  const [assetMeta, setAssetMeta] = React.useState(undefined);\n  const [assetListing, setAssetListing] = React.useState(undefined);\n  const [assetSale, setAssetSale] = React.useState(undefined);\n  const [assetBusy, setAssetBusy] = React.useState(undefined);\n\n  const [assetContent, setAssetContent] = React.useState(undefined);\n  const [assetContentType, setAssetContentType] = React.useState(undefined);\n\n  const [listingPrice, setListingPrice] = React.useState(\"1\");\n  const [resellPrice, setResellPrice] = React.useState(\"1\");\n  const [royalty, setRoyalty] = React.useState(0);\n\n  const [listResult, setListResult] = React.useState(null);\n  const [buyResult, setBuyResult] = React.useState(null);\n\n  React.useEffect(() => {\n    (async () => {\n      const meta = (\n        await post(`${API_URL}/retrieve/meta`, {\n          address: props.address,\n        })\n      ).asset;\n      setAssetMeta(meta);\n\n      const state = await post(`${API_URL}/retrieve/state`, {\n        address: props.address,\n      });\n      console.log(state);\n      setAssetListing(state.listTx);\n      setAssetSale(state.sellTx);\n      setAssetBusy(state.busy);\n\n      const contentRaw = (\n        await post(`${API_URL}/retrieve/content`, {\n          address: props.address,\n        })\n      ).content;\n      if (contentRaw === null) {\n        setAssetContent(null);\n      } else {\n        const content = Buffer.from(contentRaw, \"base64\");\n        detectFileType.fromBuffer(content, (err, res) => {\n          if (res === null) {\n            setAssetContent(\n              \"data:application/octet-stream;base64,\" + contentRaw\n            );\n            setAssetContentType(null);\n          } else {\n            setAssetContent(\"data:\" + res.mime + \";base64,\" + contentRaw);\n            setAssetContentType(res.ext);\n          }\n        });\n      }\n    })();\n  }, []);\n\n  const doList = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const vouts = (\n      await post(`${API_URL}/list/getTransaction`, {\n        address: props.address,\n        price: toSatoshi(listingPrice),\n        royalty: 25 + Math.floor((royalty * 75) / 100),\n      })\n    ).vouts;\n    const signed = (await window.dingo.requestSignTransaction([], vouts))\n      .result;\n\n    const result = await post(`${API_URL}/list/sendTransaction`, {\n      transaction: signed,\n    });\n    setListResult(result);\n  };\n\n  const doBuy = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { vins, vouts } = await post(`${API_URL}/buy/getTransaction`, {\n      address: props.address,\n      price: toSatoshi(resellPrice),\n    });\n    const signed = (await window.dingo.requestSignTransaction(vins, vouts))\n      .result;\n\n    const result = await post(`${API_URL}/buy/sendTransaction`, {\n      transaction: signed,\n    });\n    setBuyResult(result);\n  };\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {assetMeta !== undefined && assetMeta == null && (\n        <Container>\n          <Row>\n            <h1 className=\"mt-4\">This NFT does not exist!</h1>\n          </Row>\n        </Container>\n      )}\n      {assetMeta !== undefined && assetMeta !== null && (\n        <Container>\n          {assetContent !== undefined && assetContentType !== null && (\n            <Row>\n              <div style={{ maxHeight: \"50vh\" }} className=\"mt-4 mb-4\">\n                <FileViewer\n                  fileType={assetContentType}\n                  filePath={assetContent}\n                />\n              </div>\n              <CustomDivider />\n            </Row>\n          )}\n          <Row>\n            <div className=\"mt-2\">\n              {assetMeta.name !== \"\" && <h3>{assetMeta.name}</h3>}\n              {assetMeta.name === \"\" && <h3 className=\"mb-0\">Unnamed NFT</h3>}\n              <p style={{ fontSize: \"1rem\" }}>\n                <b>{assetMeta.address}</b>\n                {assetMeta.description !== \"\" && (\n                  <i>\n                    <br />\n                    {assetMeta.description}\n                  </i>\n                )}\n                <br />\n                <a\n                  href={assetContent}\n                  download={`${props.address}${\n                    assetContentType === null ? \"\" : \".\" + assetContentType\n                  }`}\n                >\n                  (Download Asset)\n                </a>\n              </p>\n            </div>\n            {assetListing !== undefined &&\n              assetListing !== null &&\n              assetSale !== undefined &&\n              assetSale !== null && (\n                <div className=\"mt-2 mb-2\">\n                  <div>\n                    <span style={{ fontSize: \"1.25rem\" }}>\n                      <b>{satoshiToLocaleString(assetSale.price)}</b> DINGO\n                    </span>\n                    <h6 className=\"mt-0\">Current Price</h6>\n                  </div>\n                  <div className=\"mt-2\">\n                    <span style={{ fontSize: \"1rem\" }}>{assetSale.owner}</span>\n                    <h6 className=\"mt-0\">Owner</h6>\n                  </div>\n                  <div className=\"mt-4\">\n                    <span style={{ fontSize: \"0.75rem\" }}>\n                      {assetListing.owner}\n                    </span>\n                    <h6 className=\"mt-0\">Creator</h6>\n                  </div>\n                </div>\n              )}\n          </Row>\n          <CustomDivider />\n          {assetBusy !== undefined && assetBusy !== null && (\n            <Row className=\"justify-content-md-center mt-2\">\n              <h2>Buy NFT</h2>\n              <div style={{ textAlign: \"center\" }} className=\"mt-4\">\n                {\" \"}\n                <h5>NFT busy</h5>\n                <p>\n                  <a className=\"simple-link\"\n                    href={\n                      \"https://openchains.info/coin/dingocoin/tx/\" + assetBusy.txid\n                    }\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    A transaction\n                  </a>{\" \"}\n                  is currenly being confirmed for this NFT. <br />\n                  Please try again in a few minutes.\n                </p>\n              </div>\n            </Row>\n          )}\n          {assetBusy !== undefined &&\n            assetBusy === null &&\n            assetListing === null && (\n              <Row className=\"justify-content-md-center mt-2\">\n                <h2>Sell NFT</h2>\n                <p>\n                  <b style={{ color: \"red\" }}>\n                    Do not share this NFT's address until you have listed it for\n                    sale, or it can be stolen from you.\n                  </b>\n                </p>\n                <p style={{ textAlign: \"left\" }}>\n                  Contragulations! If you are here, you have probably just\n                  created this NFT. It is near impossible that anyone else knows\n                  about its address. As the glorious creator of this NFT, you\n                  can{\" \"}\n                  <b>\n                    <u>set the initial selling price</u>\n                  </b>\n                  . You will also receive{\" \"}\n                  <b>\n                    <u>creator royalties</u>\n                  </b>{\" \"}\n                  for your NFT (sent automatically to the address used to sign\n                  this transaction).\n                </p>\n                {listResult == null && (\n                  <Container className=\"justify-content-md-center\">\n                    <Row className=\"mx-auto\" style={{ maxWidth: \"35rem\" }}>\n                      <Form.Group className=\"mb-3 mt-4\">\n                        <Form.Label>\n                          <b>Initial selling price (*required)</b>\n                        </Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          value={listingPrice}\n                          onChange={(e) => {\n                            if (\n                              e.target.value.match(/^[0-9]+$/) &&\n                              parseInt(e.target.value) >= 1\n                            ) {\n                              setListingPrice(e.target.value);\n                            } else {\n                              setListingPrice(\"1\");\n                            }\n                          }}\n                          style={{ textAlign: \"center\" }}\n                        />\n                        <Form.Text className=\"text-muted\">\n                          Initial selling price for the NFT in Dingocoin (min. 1\n                          Dingocoin).\n                        </Form.Text>\n                      </Form.Group>\n                      <Form.Group className=\"mb-3\">\n                        <Form.Label>\n                          <b>Creator royalty: </b>\n                          {(\n                            2.5 +\n                            Math.floor((royalty * 75) / 100) / 10\n                          ).toFixed(1) + \"%\"}\n                        </Form.Label>\n                        <Form.Range\n                          value={royalty}\n                          onChange={(e) => setRoyalty(e.target.value)}\n                        />\n                        <Form.Text className=\"text-muted\">\n                          Royalty paid to you for every transaction of this NFT.\n                        </Form.Text>\n                      </Form.Group>\n                    </Row>\n                    <Row>\n                      <Button\n                        className=\"popup-button mb-4 mx-auto px-4\"\n                        style={{ width: \"auto\" }}\n                        onClick={doList}\n                      >\n                        Sell NFT\n                      </Button>\n                    </Row>\n                  </Container>\n                )}\n                {listResult !== null && (\n                  <Container>\n                    <div style={{ textAlign: \"center\" }} className=\"mt-4\">\n                      {\" \"}\n                      <h4>Transaction submitted!</h4>\n                      <p>\n                        Transaction ID:{\" \"}\n                        <a\n                          className=\"simple-link\"\n                          href={\n                            \"https://openchains.info/coin/dingocoin/tx/\" +\n                            listResult.txid\n                          }\n                          rel=\"noreferrer\"\n                          target=\"_blank\"\n                        >\n                          {listResult.txid}\n                        </a>\n                        <br />\n                        It may take a few minutes for your transaction to be\n                        confirmed.\n                      </p>\n                    </div>\n                  </Container>\n                )}\n              </Row>\n            )}\n          {assetBusy !== undefined &&\n            assetBusy === null &&\n            assetListing !== undefined &&\n            assetListing !== null && (\n              <Row className=\"justify-content-md-center mt-2\">\n                <h2>Buy NFT</h2>\n                {buyResult == null && (\n                  <Container className=\"justify-content-md-center\">\n                    <Row className=\"mx-auto\" style={{ maxWidth: \"35rem\" }}>\n                      <Form.Group className=\"mb-3 mt-3\">\n                        <Form.Label>\n                          <b>Resell at (*required)</b>\n                        </Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          value={resellPrice}\n                          onChange={(e) => {\n                            if (\n                              e.target.value.match(/^[0-9]+$/) &&\n                              parseInt(e.target.value) >= 1\n                            ) {\n                              setResellPrice(e.target.value);\n                            } else {\n                              setResellPrice(\"1\");\n                            }\n                          }}\n                          style={{ textAlign: \"center\" }}\n                        />\n                        <Form.Text className=\"text-muted\">\n                          New price you want to sell this NFT for (min. 1\n                          Dingocoin).\n                        </Form.Text>\n                      </Form.Group>\n                    </Row>\n                    <Row>\n                      <Button\n                        className=\"popup-button mb-4 mx-auto px-4\"\n                        style={{ width: \"auto\" }}\n                        onClick={doBuy}\n                      >\n                        Buy and Resell NFT\n                      </Button>\n                    </Row>\n                  </Container>\n                )}\n                {buyResult !== null && buyResult.error === undefined && (\n                  <Container>\n                    <div style={{ textAlign: \"center\" }} className=\"mt-4\">\n                      {\" \"}\n                      <h4>Transaction submitted!</h4>\n                      <p>\n                        Transaction ID:{\" \"}\n                        <a\n                          className=\"simple-link\"\n                          href={\n                            \"https://openchains.info/coin/dingocoin/tx/\" +\n                            buyResult.txid\n                          }\n                          rel=\"noreferrer\"\n                          target=\"_blank\"\n                        >\n                          {buyResult.txid}\n                        </a>\n                        <br />\n                        It may take a few minutes for your transaction to be\n                        confirmed.\n                      </p>\n                    </div>\n                  </Container>\n                )}\n                {buyResult !== null && buyResult.error !== undefined && (\n                  <Container>\n                    <div style={{ textAlign: \"center\" }} className=\"mt-4\">\n                      {\" \"}\n                      <h4>Transaction failed!</h4>\n                      <p>\n                        You can't buy this NFT as its owner/creator.\n                      </p>\n                    </div>\n                  </Container>\n                )}\n              </Row>\n            )}\n        </Container>\n      )}\n    </div>\n  );\n}\n\nexport default NFTController;\n","import { Container, Row, Button, Col, Form } from \"react-bootstrap\";\nimport React from \"react\";\nimport CustomDivider from \"./CustomDivider\";\n\nconst MAX_ASSET_SIZE = 1 * 1e6; // 2 MB.\nconst API_URL = \"https://nftp0.dingocoin.org\";\n//const API_URL = \"http://localhost:33332\";\n\nconst toBase64 = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result.split(\",\")[1]);\n    reader.onerror = (error) => reject(error);\n  });\n\nconst post = async (link, data) => {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), 5000);\n  return (\n    await fetch(link, {\n      withCredentials: true,\n      method: \"POST\",\n      signal: controller.signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n  ).json();\n};\n\nfunction CreateController() {\n  const [asset, setAsset] = React.useState(null);\n  const [assetError, setAssetError] = React.useState(\"\");\n  const [name, setName] = React.useState(\"\");\n  const [description, setDescription] = React.useState(\"\");\n  const [tags, setTags] = React.useState(\"\");\n  const [tradeDeadline, setTradeDeadline] = React.useState(\"\");\n  const [concealDeadline, setConcealDeadline] = React.useState(\"\");\n  const [privatizeDeadline, setPrivatizeDeadline] = React.useState(\"\");\n  const [showAdvanced, setShowAdvanced] = React.useState(false);\n\n  const [success, setSuccess] = React.useState(null);\n  const [address, setAddress] = React.useState(null);\n\n  const doSubmit = async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.nativeEvent.stopImmediatePropagation();\n\n    if (asset === null) {\n      setAssetError(\"Asset required\");\n      return;\n    } else if (asset.size > MAX_ASSET_SIZE) {\n      setAssetError(\"Size limit exceeded\");\n      return;\n    } else {\n      setAssetError(\"\");\n    }\n\n    const payload = {};\n    payload.asset = await toBase64(asset);\n    payload.details = {\n      name: name,\n      description: description,\n      tags: tags,\n      tradeDeadline: tradeDeadline === \"\" ? -1 : parseInt(tradeDeadline),\n      concealDeadline: concealDeadline === \"\" ? -1 : parseInt(concealDeadline),\n      privatizeDeadline:\n        privatizeDeadline === \"\" ? -1 : parseInt(privatizeDeadline),\n    };\n\n    const response = await post(`${API_URL}/create`, payload);\n    if (\"error\" in response) {\n      return;\n    }\n\n    setSuccess(true);\n    setAddress(response.address);\n  };\n\n  return (\n    <div>\n      <header className=\"App-header\">\n        <Container>\n          <Row>\n            <h1 className=\"mt-4\">Create NFT</h1>\n            <CustomDivider />\n          </Row>\n        </Container>\n      </header>\n      <Container>\n        <Row>\n          <Col>\n            {(success === null || success === false) && (\n              <Form onSubmit={doSubmit}>\n                <Form.Group className=\"mb-3\">\n                  <Form.Label>\n                    <b>Asset (*required)</b>\n                  </Form.Label>\n                  <Form.Control\n                    type=\"file\"\n                    onChange={(e) => setAsset(e.target.files[0])}\n                    isInvalid={assetError !== \"\"}\n                  />\n                  {assetError && (\n                    <div>\n                      <Form.Text className=\"input-error\">\n                        {assetError}\n                      </Form.Text>\n                    </div>\n                  )}\n                  <Form.Text className=\"text-muted\">\n                    The NFT will be locked uniquely to this file. You can only\n                    use this file once. (Max 1 MB).\n                  </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                  <Form.Label>NFT name (optional)</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  />\n                  <Form.Text className=\"text-muted\">\n                    (Max 40 characters).\n                  </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                  <Form.Label>NFT description (optional)</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  />\n                  <Form.Text className=\"text-muted\">\n                    (Max 500 characters).\n                  </Form.Text>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                  <Form.Label>NFT tags (optional)</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    value={tags}\n                    onChange={(e) => setTags(e.target.value)}\n                  />\n                  <Form.Text className=\"text-muted\">\n                    (Space separated; max 100 characters).\n                  </Form.Text>\n                </Form.Group>\n\n                {showAdvanced && (\n                  <div>\n                    <Form.Group className=\"mb-3\">\n                      <Form.Label>Trade until (optional)</Form.Label>\n                      <Form.Control\n                        type=\"text\"\n                        placeholder=\"Feature coming soon...\"\n                        value={tradeDeadline}\n                        onChange={(e) => {\n                          const v = e.target.value;\n                          if (v.match(/^[0-9]+$/)) {\n                            setTradeDeadline(e.target.value);\n                          } else {\n                            e.preventDefault();\n                            e.stopPropagation();\n                          }\n                        }}\n                        disabled\n                      />\n                      <Form.Text className=\"text-muted\">\n                        The asset can be traded only up to this block height.\n                      </Form.Text>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                      <Form.Label>Conceal content until (optional)</Form.Label>\n                      <Form.Control\n                        type=\"text\"\n                        placeholder=\"Feature coming soon...\"\n                        value={concealDeadline}\n                        onChange={(e) => {\n                          const v = e.target.value;\n                          if (v.match(/^[0-9]*$/)) {\n                            setConcealDeadline(e.target.value);\n                          } else {\n                            e.preventDefault();\n                            e.stopPropagation();\n                          }\n                        }}\n                        disabled\n                      />\n                      <Form.Text className=\"text-muted\">\n                        The asset can be traded but not viewed before this block\n                        height.\n                      </Form.Text>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                      <Form.Label>\n                        Privatize content until (optional)\n                      </Form.Label>\n                      <Form.Control\n                        type=\"text\"\n                        placeholder=\"Feature coming soon...\"\n                        value={privatizeDeadline}\n                        onChange={(e) => {\n                          const v = e.target.value;\n                          if (v.match(/^[0-9]*$/)) {\n                            setPrivatizeDeadline(e.target.value);\n                          } else {\n                            e.preventDefault();\n                            e.stopPropagation();\n                          }\n                        }}\n                        disabled\n                      />\n                      <Form.Text className=\"text-muted\">\n                        Only the latest owner can view the asset's content\n                        before this block height, unless concealed.\n                      </Form.Text>\n                    </Form.Group>\n                  </div>\n                )}\n                {!showAdvanced && (\n                  <div\n                    className=\"clickable\"\n                    onClick={(e) => {\n                      setShowAdvanced(true);\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                  >\n                    Show advanced options ▼\n                  </div>\n                )}\n                {showAdvanced && (\n                  <div\n                    className=\"clickable\"\n                    onClick={(e) => {\n                      setShowAdvanced(false);\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                    href=\"#\"\n                  >\n                    Hide advanced options ▲\n                  </div>\n                )}\n\n                <div style={{ textAlign: \"center\" }}>\n                  {success === null && (\n                    <Button\n                      className=\"popup-button mt-2 px-4\"\n                      variant=\"primary\"\n                      type=\"submit\"\n                    >\n                      Create NFT\n                    </Button>\n                  )}\n                </div>\n              </Form>\n            )}\n            {success === true && (\n              <div style={{ textAlign: \"center\" }}>\n                {\" \"}\n                <h3>NFT Created!</h3>\n                <p>\n                  NFT Address:{\" \"}\n                  <a\n                    className=\"simple-link\"\n                    href={\"/nft?address=\" + address}\n                    rel=\"noreferrer\"\n                  >\n                    {address}\n                  </a>\n                </p>\n              </div>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default CreateController;\n","export default __webpack_public_path__ + \"static/media/dingocoin.15331900.png\";","import \"./App.scss\";\nimport CreateController from \"./CreateController\";\nimport NFTController from \"./NFTController\";\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\nimport DingocoinLogo from \"./assets/img/dingocoin.png\";\nimport React from \"react\";\n\nfunction App() {\n  const [location, setLocation] = React.useState(null);\n  React.useEffect(() => {\n    setLocation(window.location.pathname);\n  }, []);\n  React.useEffect(() => {}, [location]);\n\n  return (\n    <div className=\"App\">\n      <Navbar className=\"navbar\" bg=\"dark\" expand=\"lg\" sticky=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#home\" className=\"navbar-brand align-items-center\">\n            <img alt=\"\" src={DingocoinLogo} />\n            <span>DINGOCOIN</span>\n            <span className=\"navbar-brand-subtitle\"> NFT</span>\n          </Navbar.Brand>\n          <Navbar.Collapse>\n            <Nav className=\"ms-auto\">\n              <Nav.Link>Explore</Nav.Link>\n              <Nav.Link href=\"/create\">Create</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        </Container>\n      </Navbar>\n\n      <section className=\"section-content\">\n        {(location === null && <div />) ||\n          (location === \"/create\" && <CreateController />) ||\n          (location === \"/nft\" && (\n            <NFTController\n              address={new URLSearchParams(window.location.search).get(\n                \"address\"\n              )}\n              style={{ minHeight: \"100vh\" }}\n            />\n          ))}\n      </section>\n      <section>\n        <div className=\"justify-content-center section-footer align-items-center\">\n          <h6>Copyright © The Dingocoin Project 2021-2022</h6>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport HttpsRedirect from 'react-https-redirect';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HttpsRedirect>\n      <App />\n    </HttpsRedirect>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// Assets.\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons'\n\nfunction CustomDivider() {\n  return (\n    <div className=\"divider-custom\">\n      <div className=\"divider-custom-line\"></div>\n      <div className=\"divider-custom-icon\"><FontAwesomeIcon icon={faAngleDown}/></div>\n      <div className=\"divider-custom-line\"></div>\n    </div>\n  );\n}\n\nexport default CustomDivider;\n"],"sourceRoot":""}